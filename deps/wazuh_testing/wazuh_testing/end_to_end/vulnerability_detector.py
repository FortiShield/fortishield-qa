from wazuh_testing.tools.system import HostManager
from wazuh_testing.end_to_end.indexer_api import get_indexer_values

from typing import Dict
from datetime import datetime
import re


def check_vuln_state_index(host_manager: HostManager, vulnerability_data: Dict[str, Dict], current_datetime: str = None):
    """
    Check vulnerability state index for a host.

    Args:
        host_manager (HostManager): An instance of the HostManager class containing information about hosts.
        vulnerability_data (dict): Dictionary containing vulnerability data.

    ToDo:
        Implement the functionality.
    """
    index_vuln_state_content = get_indexer_values(host_manager, index='wazuh-states-vulnerabilities',
                                                  greater_than_timestamp=current_datetime)['hits']['hits']
    expected_alerts_not_found = []

    for agent in host_manager.get_group_hosts('agent'):
        host_os_name = host_manager.get_host_variables(agent)['os'].split('_')[0]
        host_os_arch = host_manager.get_host_variables(agent)['architecture']

        if host_os_name in vulnerability_data and host_os_arch in vulnerability_data:
            vulnerabilities = vulnerability_data[host_os_name][host_os_arch]
            for vulnerability in vulnerabilities:

                for indice_vuln in index_vuln_state_content:
                    state_agent = indice_vuln['agent']['name']
                    state_cve = indice_vuln['vulnerability']['enumeration']
                    state_package_name = indice_vuln['package']['name']
                    state_package_version = indice_vuln['agent']['version']
                    found = False

                    if state_agent == agent and state_cve == vulnerability['CVE'] \
                        and state_package_name == vulnerability['PACKAGE_NAME'] and \
                            state_package_version == vulnerability['PACKAGE_VERSION']:
                        found = True

                if not found:
                    expected_alerts_not_found.append(vulnerability)

    assert len(expected_alerts_not_found) == 0, f"Expected alerts were not found {expected_alerts_not_found}"


def detect_alerts_by_agent(alerts, regex, current_datetime=None):
    alerts_vuln_by_agent = {}
    for alert in alerts:
        valid_timestamp = True
        if current_datetime:
            dt = datetime.strptime(alert['_source']['timestamp'], "%Y-%m-%dT%H:%M:%S.%f%z")

            # Convert datetime to Unix timestamp (integer)
            timestamp = int(dt.timestamp())
            if timestamp < current_datetime:
                valid_timestamp = False

        if valid_timestamp:
            if re.match(regex, alert['_source']['rule']['description']):
                if 'agent' in alert['_source']:
                    agent = alert['_source']['agent']['name']
                    if agent not in alerts_vuln_by_agent:
                        alerts_vuln_by_agent[agent] = []
                    else:
                        alerts_vuln_by_agent[agent].append(alert)

    return alerts_vuln_by_agent


def check_vuln_alert_indexer(host_manager: HostManager, vulnerability_data: Dict[str, Dict], current_datetime: str = None):
    """
    Check vulnerability alerts in the indexer for a host.

    Args:
        host_manager (HostManager): An instance of the HostManager class containing information about hosts.
        vulnerability_data (dict): Dictionary containing vulnerability data.

    Returns:
        list: List of vulnerability alerts.
    """
    regex_cve_affects = f"CVE.* affects .*"
    regex_solved_vuln = f"The .* that affected .* was solved due to a package removal"


    indexer_alerts = get_indexer_values(host_manager, greater_than_timestamp=current_datetime)['hits']['hits']
    # Get CVE affects alerts for all agents
    detected_vuln_alerts_by_agent = detect_alerts_by_agent(indexer_alerts, regex_cve_affects, current_datetime)
    solved_alerts_by_agent = detect_alerts_by_agent(indexer_alerts, regex_solved_vuln, current_datetime)
    triggered_alerts = detected_vuln_alerts_by_agent
    expected_alerts_not_found = []

    if 'state' in vulnerability_data and not vulnerability_data['state']:
        triggered_alerts = solved_alerts_by_agent

    for agent in host_manager.get_group_hosts('agent'):
        host_os_name = host_manager.get_host_variables(agent)['os'].split('_')[0]
        host_os_arch = host_manager.get_host_variables(agent)['architecture']

        if host_os_name in vulnerability_data and host_os_arch in vulnerability_data:
            vulnerabilities = vulnerability_data[host_os_name][host_os_arch]
            for vulnerability in vulnerabilities:
                cve = vulnerability['CVE']
                package = vulnerabilities['PACKAGE']
                version = vulnerabilities['VERSION']
                found = False
                for triggered_alert in triggered_alerts[agent]:
                    if triggered_alert['cve'] == cve and triggered_alert['package'] == package and \
                       triggered_alert['version'] == version:
                        found = True
                if not found:
                    expected_alerts_not_found.append(vulnerability)

    assert len(expected_alerts_not_found) == 0, f"Expected alerts were not found {expected_alerts_not_found}"