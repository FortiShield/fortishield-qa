from wazuh_testing.tools.system import HostManager
from wazuh_testing.end_to_end.indexer_api import get_indexer_values

from typing import Dict
import logging
import re


def check_vuln_state_index(host_manager: HostManager, vulnerability_data: Dict[str, Dict], current_datetime: str = None):
    """
    Check vulnerability state index for a host.

    Args:
        host_manager (HostManager): An instance of the HostManager class containing information about hosts.
        vulnerability_data (dict): Dictionary containing vulnerability data.

    ToDo:
        Implement the functionality.
    """
    index_vuln_state_content = get_indexer_values(host_manager, index='wazuh-states-vulnerabilities',
                                                  greater_than_timestamp=current_datetime)['hits']['hits']
    expected_alerts_not_found = []

    logging.critical(f"Checking vulnerability state index {vulnerability_data}")

    for agent in host_manager.get_group_hosts('agent'):
        logging.critical(f"Checking vulnerability state index for {agent}")

        host_os_name = host_manager.get_host_variables(agent)['os'].split('_')[0]
        host_os_arch = host_manager.get_host_variables(agent)['architecture']

        logging.critical(f"Host OS name: {host_os_name}")
        logging.critical(f"Host OS arch: {host_os_arch}")

        if host_os_name in vulnerability_data:
            if host_os_arch in vulnerability_data[host_os_name]:
                logging.critical(f"Inside Host OS arch: {host_os_arch}")

                vulnerabilities = vulnerability_data[host_os_name][host_os_arch]

                logging.critical(f"Vulnerabilities: {vulnerabilities}")

                for vulnerability in vulnerabilities:
                    found = False
                    for indice_vuln in index_vuln_state_content:
                        logging.critical(f"Indice vuln: {indice_vuln}")

                        state_agent = indice_vuln['_source']['agent']['name']
                        state_cve = indice_vuln["_source"]['vulnerability']['id']
                        state_package_name = indice_vuln['_source']['package']['name']
                        state_package_version = indice_vuln['_source']['package']['version']

                        if state_agent == agent and state_cve == vulnerability['CVE'] \
                            and state_package_name == vulnerability['PACKAGE_NAME'] and \
                                state_package_version == vulnerability['PACKAGE_VERSION']:
                            found = True

                    if not found:
                        expected_alerts_not_found.append(vulnerability)

    logging.critical(f"Expected alerts not found: {expected_alerts_not_found}")
    logging.critical(f"Triggered alerts: {index_vuln_state_content}")

    return expected_alerts_not_found



def get_alerts_by_agent(alerts, regex):
    """
    Get specific alerts by agent.

    Args:
        alerts (list): List of alerts.
        regex (str): Regular expression to match the alerts.

    Returns:
        dict: Dictionary containing the alerts by agent.
    """
    alerts_vuln_by_agent = {}

    for alert in alerts:
        if re.match(regex, alert['_source']['rule']['description']):
            if 'agent' in alert['_source']:
                agent = alert['_source']['agent']['name']
                if agent not in alerts_vuln_by_agent:
                    alerts_vuln_by_agent[agent] = []
                else:
                    alerts_vuln_by_agent[agent].append(alert)

    return alerts_vuln_by_agent


def get_indexed_vulnerabilities_by_agent(indexed_vulnerabilities):
    vulnerabilities_by_agent = {}
    for vulnerabilities_state in indexed_vulnerabilities['hits']['hits']:
        if 'agent' in vulnerabilities_state['_source']:
            agent = vulnerabilities_state['_source']['agent']['name']
            if agent not in vulnerabilities_by_agent:
                vulnerabilities_by_agent[agent] = []
            else:
                vulnerabilities_by_agent[agent].append(vulnerabilities_state)

    return vulnerabilities_by_agent


def check_vuln_alert_indexer(host_manager: HostManager, vulnerability_data: Dict[str, Dict],
                             current_datetime: str = ''):
    """
    Check vulnerability alerts in the indexer for a host.

    Args:
        host_manager (HostManager): An instance of the HostManager class containing information about hosts.
        vulnerability_data (dict): Dictionary containing vulnerability data.

    Returns:
        list: List of vulnerability alerts.
    """
    regex_cve_affects = "CVE.* affects .*"
    regex_solved_vuln = "The .* that affected .* was solved due to a package removal"

    logging.critical(f"Checking vulnerability alerts in the indexer {vulnerability_data}")

    indexer_alerts = get_indexer_values(host_manager, greater_than_timestamp=current_datetime)['hits']['hits']

    # Get CVE affects alerts for all agents
    detected_vuln_alerts_by_agent = get_alerts_by_agent(indexer_alerts, regex_cve_affects)
    solved_alerts_by_agent = get_alerts_by_agent(indexer_alerts, regex_solved_vuln)

    triggered_alerts = detected_vuln_alerts_by_agent
    expected_alerts_not_found = []

    if 'state' in vulnerability_data and not vulnerability_data['state']:
        triggered_alerts = solved_alerts_by_agent

    for agent in host_manager.get_group_hosts('agent'):
        logging.critical(f"Checking vulnerability alerts for {agent}")
        host_os_name = host_manager.get_host_variables(agent)['os'].split('_')[0]
        host_os_arch = host_manager.get_host_variables(agent)['architecture']
        logging.critical(f"Host OS name: {host_os_name}")
        logging.critical(f"Host OS arch: {host_os_arch}")
        logging.critical(f"Check1: {host_os_arch in vulnerability_data}")
        logging.critical(f"Check2: {host_os_name in vulnerability_data}")

        if host_os_name in vulnerability_data:
            if host_os_arch in vulnerability_data[host_os_name]:
                logging.critical(f"Inside Host OS arch: {host_os_arch}")
                vulnerabilities = vulnerability_data[host_os_name][host_os_arch]
                for vulnerability in vulnerabilities:

                    logging.critical(f"Checking vulnerability: {vulnerability}")

                    cve = vulnerability['CVE']
                    package = vulnerability['PACKAGE_NAME']
                    version = vulnerability['PACKAGE_VERSION']
                    found = False
                    for triggered_alert in triggered_alerts[agent]:
                        alert_package_name = triggered_alert['_source']['data']['vulnerability']['package']["name"]
                        alert_package_version = \
                            triggered_alert['_source']['data']['vulnerability']['package']['version']
                        alert_cve = triggered_alert['_source']['data']['vulnerability']['cve']

                        if alert_cve == cve and alert_package_name == package and \
                           alert_package_version == version:
                            found = True

                    if not found:
                        print(f"Vulnerability not found: {vulnerability}")
                        expected_alerts_not_found.append(vulnerability)

    logging.critical(f"Expected alerts not found: {expected_alerts_not_found}")
    logging.critical(f"Triggered alerts: {triggered_alerts}")

    return expected_alerts_not_found
