import os
import re
import json
from datetime import datetime, timedelta
from copy import deepcopy

from wazuh_testing.tools import WAZUH_PATH
from wazuh_testing import CVE_DB_PATH
from wazuh_testing.tools.time import parse_datetime_format
from wazuh_testing.db_interface import agent_db, cve_db


# Timeouts
T_5 = 5
T_10 = 10
T_15 = 15
T_20 = 20
T_60 = 60
T_40 = 40
T_180 = 180
T_360 = 360
T_800 = 800

DB_PATH = os.path.join(WAZUH_PATH, 'queue', 'db')
MSU_PATH = os.path.join(WAZUH_PATH, 'queue', 'vulnerabilities', 'dictionaries', 'msu.json.gz')

VULNERABLE_PACKAGES = [
    {
        "name": "custom-package-0",
        "version": "1.0.0",
        "vendor": "wazuh-mocking",
        "cveid": "CVE-000"
    },
    {
        "name": "custom-package-1",
        "version": "1.0.0",
        "vendor": "wazuh-mocking",
        "cveid": "CVE-001"
    },
    {
        "name": "custom-package-2",
        "version": "1.0.0",
        "vendor": "wazuh-mocking",
        "cveid": "CVE-002"
    },
    {
        "name": "custom-package-3",
        "version": "1.0.0",
        "vendor": "wazuh-mocking",
        "cveid": "CVE-003"
    },
    {
        "name": "custom-package-4",
        "version": "1.0.0",
        "vendor": "wazuh-mocking",
        "cveid": "CVE-004"
    }
]

DEFAULT_PACKAGE_NAME = "wazuhintegrationpackage"
DEFAULT_VULNERABILITY_ID = "WVE-000"

MOCKED_AGENT_NAME = 'mocked_agent'
CVE_NUM_TABLES = 24

CUSTOM_VULNERABLE_PACKAGES = 'custom_vulnerable_packages.json'
REAL_NVD_FEED = 'real_nvd_feed.json'
CUSTOM_NVD_FEED = 'custom_nvd_feed.json'
CUSTOM_REDHAT_JSON_FEED = 'custom_redhat_json_feed.json'
CUSTOM_REDHAT_OVAL_FEED = 'custom_redhat_oval_feed.xml'
CUSTOM_CANONICAL_OVAL_FEED = 'custom_canonical_oval_feed.xml'
CUSTOM_DEBIAN_OVAL_FEED = 'custom_debian_oval_feed.xml'
CUSTOM_DEBIAN_JSON_FEED = 'custom_debian_json_feed.json'
CUSTOM_NVD_VULNERABILITIES_1 = 'nvd_vulnerabilities_1.json'
CUSTOM_NVD_VULNERABILITIES_2 = 'nvd_vulnerabilities_2.json'
CUSTOM_MSU_JSON_FEED = 'custom_msu.json'
CUSTOM_CPE_HELPER = 'custom_cpe_helper.json'
CUSTOM_ARCHLINUX_JSON_FEED = 'custom_archlinux_feed.json'
CUSTOM_ALAS_JSON_FEED = 'custom_alas_feed.json'
CUSTOM_ALAS2_JSON_FEED = 'custom_alas2_feed.json'
INVALID_RHEL_FEEDS_CONF = 'wazuh_invalid_redhat_feed.yaml'
INVALID_CANONICAL_FEEDS_CONF = 'wazuh_invalid_canonical_feed.yaml'
INVALID_ARCHLINUX_FEEDS_CONF = 'wazuh_invalid_archlinux_feed.yaml'
INVALID_DEBIAN_FEEDS_CONF = 'wazuh_invalid_debian_feed.yaml'
INVALID_MSU_FEEDS_CONF = 'wazuh_invalid_msu_feed.yaml'
INVALID_ALAS_FEEDS_CONF = 'wazuh_invalid_alas_feed.yaml'
INVALID_ALAS2_FEEDS_CONF = 'wazuh_invalid_alas2_feed.yaml'

REDHAT_NUM_CUSTOM_VULNERABILITIES = 1
CANONICAL_NUM_CUSTOM_VULNERABILITIES = 1
DEBIAN_NUM_CUSTOM_VULNERABILITIES = 3
NVD_NUM_CUSTOM_VULNERABILITIES = 5
ARCH_NUM_CUSTOM_VULNERABILITIES = 50
ALAS_NUM_CUSTOM_VULNERABILITIES = 36
ALAS2_NUM_CUSTOM_VULNERABILITIES = 18

SYSTEM_DATA = {
    'WINDOWS10': {'target': 'WINDOWS10', 'os_name': 'Microsoft Windows Server 2016 Datacenter Evaluation',
                  'os_major': '10', 'os_minor': '0', 'os_platform': 'windows', 'name': 'windows', 'format': 'win'},
    'MAC': {'target': 'MAC', 'os_name': 'Mac OS X', 'os_major': '10', 'os_minor': '15', 'os_platform': 'darwin',
            'name': 'macos-catalina', 'format': 'pkg'},
    'MACS': {'target': 'MAC', 'os_name': 'Mac OS X Server', 'os_major': '5', 'os_minor': '10', 'os_platform': 'darwin',
             "name": "macos-server", 'format': 'pkg'},
    'ARCH': {'target': 'ARCH', 'os_name': 'Arch Linux', 'os_major': '', 'os_minor': '', 'os_platform': '',
             'name': 'archlinux', 'format': 'rpm'},
    'ALAS': {'target': 'Amazon-Linux', 'os_name': 'Amazon Linux AMI', 'os_major': '2018', 'os_minor': '03',
             'os_platform': 'amzn', 'name': 'amazonlinux', 'format': 'rpm'},
    'ALAS2': {'target': 'Amazon-Linux-2', 'os_name': 'Amazon Linux', 'os_major': '2', 'os_minor': '',
              'os_platform': 'amzn', 'name': 'amazonlinux2', 'format': 'rpm'},
    'RHEL8': {'target': 'RHEL8', 'os_name': 'CentOS Linux', 'os_major': '8', 'os_minor': '1', 'os_platform': 'centos',
              'name': 'centos8', 'format': 'rpm'},
    'RHEL7': {'target': 'RHEL7', 'os_name': 'CentOS Linux', 'os_major': '7', 'os_minor': '1', 'os_platform': 'centos',
              'name': 'centos7', 'format': 'rpm'},
    'RHEL6': {'target': 'RHEL6', 'os_name': 'CentOS Linux', 'os_major': '6', 'os_minor': '1', 'os_platform': 'centos',
              'name': 'centos6', 'format': 'rpm'},
    'RHEL5': {'target': 'RHEL5', 'os_name': 'CentOS Linux', 'os_major': '5', 'os_minor': '1', 'os_platform': 'centos',
              'name': 'centos5', 'format': 'rpm'},
    'BIONIC': {'target': 'BIONIC', 'os_name': 'Ubuntu', 'os_major': '18', 'os_minor': '04', 'os_platform': 'ubuntu',
               'name': 'Ubuntu-bionic', 'format': 'deb'},
    'XENIAL': {'target': 'XENIAL', 'os_name': 'Ubuntu', 'os_major': '16', 'os_minor': '04', 'os_platform': 'ubuntu',
               'name': 'Ubuntu-xenial', 'format': 'deb'},
    'TRUSTY': {'target': 'TRUSTY', 'os_name': 'Ubuntu', 'os_major': '14', 'os_minor': '04', 'os_platform': 'ubuntu',
               'name': 'Ubuntu-trusty', 'format': 'deb'},
    'BUSTER': {'target': 'BUSTER', 'os_name': 'Debian GNU/Linux', 'os_major': '10', 'os_minor': '0',
               'os_platform': 'debian', 'name': 'debian10', 'format': 'deb'},
    'STRETCH': {'target': 'STRETCH', 'os_name': 'Debian GNU/Linux', 'os_major': '9', 'os_minor': '0',
                'os_platform': 'debian', 'name': 'debian9', 'format': 'deb'}
}

VENDOR = {
    'RHEL8': 'Red Hat, Inc.',
    'RHEL7': 'Red Hat, Inc.',
    'RHEL6': 'Red Hat, Inc.',
    'RHEL5': 'Red Hat, Inc.',
    'BIONIC': 'canonical',
    'XENIAL': 'canonical',
    'TRUSTY': 'canonical',
    'BUSTER': 'debian',
    'STRETCH': 'debian',
    'Amazon-Linux': 'Amazon.com',
    'Amazon-Linux-2': 'Amazon.com',
    'ARCH': 'Arch Linux',
}

NVD_LOG = 'National Vulnerability Database'
REDHAT_LOG = 'Red Hat Enterprise Linux'
BIONIC_LOG = 'Ubuntu Bionic'
ARCH_LOG = 'Arch Linux'
ALAS_LOG = 'Amazon Linux 1'
ALAS2_LOG = 'Amazon Linux 2'
BUSTER_LOG = 'Debian Buster'
MSU_LOG = 'Microsoft Security Update'
VULNERABILITIES = 'vulnerabilities.json'

FEED_TABLES = ['vulnerabilities', 'vulnerabilities_info', 'references_info', 'bugzilla_references_info',
               'advisories_info', 'metadata', 'variables']
AGENT_SYS_TABLES = ['sys_programs', 'sys_hotfixes', 'sys_osinfo']
NVD_TABLES = ['NVD_REFERENCE', 'NVD_METRIC_CVSS', 'NVD_METADATA', 'NVD_CVE_MATCH', 'NVD_CVE_MATCH',
              'NVD_CVE_CONFIGURATION', 'NVD_CVE', 'NVD_CPE']

REDHAT_KEY_FIELDS_FEEDS = ['CVE', 'bugzilla_description', 'affected_packages']

XML_FEED_NAMESPACES = [
    {'name': '', 'url': 'http://oval.mitre.org/XMLSchema/oval-definitions-5'},
    {'name': 'ind-def', 'url': 'http://oval.mitre.org/XMLSchema/oval-definitions-5#independent'},
    {'name': 'oval', 'url': 'http://oval.mitre.org/XMLSchema/oval-common-5'},
    {'name': 'unix-def', 'url': 'http://oval.mitre.org/XMLSchema/oval-definitions-5#unix'},
    {'name': 'linux-def', 'url': 'http://oval.mitre.org/XMLSchema/oval-definitions-5#linux'}
]

VULNERABILITY_DETECTOR_PREFIX = r'.*wazuh-modulesd:vulnerability-detector.*'
VULNERABILITY_DETECTOR_ALERT_PREFIX = r'^vulnerability.*'

# Test data variables
EXTRA_TEST_DATA = [[1, 2, 3], {'a': 1, 'b': 2}, 'extra_tag', 12345, 'ñ', 'テスト', 'ИСПЫТАНИЕ', '测试', 'اختبار', ' ', '']
EXTRA_TEST_VALUES = [(tag, value) for tag in EXTRA_TEST_DATA for value in EXTRA_TEST_DATA]
EXTRA_TEST_IDS = [f"tag: {value[0]}, value: {value[1]}" for value in EXTRA_TEST_VALUES]

TEST_CHARACTERS = ['.', ':', '@', '#', '*', '-', '_', "'", '"', '/', '=', 'ñ', 'ç', '+', '^', '!', '?', '%', '&', '`',
                   '¿', '?', '(', ')', '|', 'º', '$', '½', '¬', '!', '~', '¡', '[', ']', '{', '}']

CUSTOM_INPUT_TEST_VALUES = [None, '', 'dummy value', 12345, ['1', '2', '3', '4', '5'], 'ñ', 'テスト', 'ИСПЫТАНИЕ', '测试',
                            'اختبار']


def update_feed_path_configurations(configurations, metadata, feeds_path):
    """Replace feed path tags in the configuration template, using the metadata information.

    Args:
        configurations (list(dict)): List of configuration templates.
        metadata (list(dict)): List of configuration templates metadata.
        feeds_path (str): Absolute path where the feeds are located.

    Returns:
        list(dict): List of configurations with the feeds path updated.
    """
    new_configurations = deepcopy(configurations)

    for index, _ in enumerate(configurations):
        if 'json_feed' in metadata[index] and metadata[index]['json_feed'] is not None:
            new_configurations[index] = json.loads(json.dumps(new_configurations[index]).\
                replace(metadata[index]['json_feed_tag'], os.path.join(feeds_path, metadata[index]['provider_name'],
                                                                       metadata[index]['json_feed'])))

        if 'oval_feed' in metadata[index] and metadata[index]['oval_feed'] is not None:
            new_configurations[index] = json.loads(json.dumps(new_configurations[index]).\
                replace(metadata[index]['oval_feed_tag'], os.path.join(feeds_path, metadata[index]['provider_name'],
                                                                       metadata[index]['oval_feed'])))

        if 'nvd_feed_tag' in metadata[index] and 'nvd_feed' in metadata[index]:
            new_configurations[index] = json.loads(json.dumps(new_configurations[index]).\
                replace(metadata[index]['nvd_feed_tag'], os.path.join(feeds_path, 'nvd', metadata[index]['nvd_feed'])))

    return new_configurations


def insert_vulnerable_packages(agent_id='000', vendor='Red Hat, Inc.', count=5):
    """Insert vulnerable packages to an agent.

    Args:
        agent_id (str): Agent ID.
        vendor (str): Package vendor.
        count (int): Number of vulnerable packages to insert.

    Raises:
        ValueError: If count parameter has an invalid value.
    """
    if count > len(VULNERABLE_PACKAGES):
        raise ValueError(f"Count parameter must be lower or equal than {len(VULNERABLE_PACKAGES)}")

    for package in VULNERABLE_PACKAGES[:count]:
        agent_db.insert_package(name=package['name'], version=package['version'], source=package['name'],
                                agent_id=agent_id, vendor=vendor)


def insert_vulnerabilities_agent_inventory(agent_id='000', status='VALID'):
    """Insert vulnerabilities in the agent inventory.

    Args:
        agent_id (str): Agent ID.
        status (str): Vulnerability status (PENDING, VALID, OBSOLETE).
    """
    for package in VULNERABLE_PACKAGES:
        agent_db.insert_vulnerability_in_agent_inventory(agent_id=agent_id, name=package['name'],
                                                         cve=package['cveid'], status=status)


def feed_is_recently_updated(provider_name, provider_os, threshold_weeks):
    """Check if the provider OS feed is recently updated according to a specified threshold.

    Args:
        provider_name (str): Provider name (example: Canonical).
        provider_os (str): Provider OS (example: FOCAL).
        threshold_weeks (int): Number of weeks to decide if the feed is recently updated.

    Returns:
        boolean: True if the feed is considered recently updated, False otherwise.
    """
    if provider_name == 'National Vulnerability Database':
        current_year = datetime.now().year
        feed_update_timestamp = cve_db.get_nvd_metadata_timestamp(year=current_year)
    else:
        feed_update_timestamp = cve_db.get_metadata_timestamp(provider_os=provider_os)
        # Apply a fix to the MSU timestamp, because by default it cannot be parsed.
        if provider_name == 'Microsoft Security Update' and re.compile(r".*-\d{2}$").match(feed_update_timestamp):
            feed_update_timestamp += ':00'

    # Parse the metadata timestamp to a common format
    feed_update_timestamp = datetime.strptime(parse_datetime_format(feed_update_timestamp), '%Y-%m-%d %H:%M:%S')

    # Return whether or not the timestamp exceeds the threshold_weeks
    return False if (datetime.now() - timedelta(weeks=threshold_weeks)) > feed_update_timestamp else True
