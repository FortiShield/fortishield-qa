# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import re
import os
import sqlite3
import datetime


PACKAGES_DB_PATH = "/var/ossec/queue/db/"
CVE_DB_PATH = "/var/ossec/queue/vulnerabilities/cve.db"


def callback_detect_vulnerability_scan_started(line):
    msg = r'.*wazuh-modulesd:vulnerability-detector.* INFO:.*Starting vulnerability scanning'
    match = re.match(msg, line)

    return match is not None


def callback_detect_vulnerability_scan_finished(line):
    msg = r'.*wazuh-modulesd:vulnerability-detector.* INFO:.*Vulnerability scanning finished'
    match = re.match(msg, line)
    return match is not None


def callback_detect_vulnerability_scan_sleeping(line):
    msg = r'.*wazuh-modulesd:vulnerability-detector.* Sleeping for (.*)...'
    match = re.match(msg, line)

    return match.group(1) if match is not None else ""


def callback_detect_vulnerability_detector_disabled(line):
    msg = r'(.*)wazuh-modulesd:vulnerability-detector(.*)DEBUG: Module disabled. Exiting...'
    match = re.match(msg, line)

    return match is not None


def callback_detect_vulnerability_detector_enabled(line):
    msg = r'(.*)wazuh-modulesd:vulnerability-detector(.*)'
    match1 = re.match(msg, line)
    msg = r'(.*)DEBUG: Module disabled. Exiting...(.*)'
    match2 = re.match(msg, line)

    return match1 is not None and match2 is None


def load_db(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    return conn, cursor


def insert_package_in_db(agent = "000", format = "rpm", name = "WazuhIntegrationPackage", 
    priority = "", section = "Unspecified", size= 99, vendor = "WazuhIntegrationTests", version = "1.0.0-1.el7",
    architecture = "x86_64", multiarch = "", description = "Wazuh Integration tests mock package", 
    source = "Wazuh Integration tests mock package", location = "", triaged = 0, cpe = "",
    install_time = datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S")
):
    """
    Insert a new package in the installed package database, with the parameters given as arguments.
    If used in conjunction with insert_vulnerability using the default arguments it will generate an alert.
    """
    try:
        path =  os.path.join(PACKAGES_DB_PATH,"{}.db".format(agent))
        db = load_db(path)
        sqlite_insert_query = """INSERT INTO sys_programs
                            (scan_id, scan_time, format, name, priority, section, size, vendor, install_time, version, \
                                architecture, multiarch, source, description, location, triaged, cpe)
                            select scan_id, scan_time, \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", 
                            \"{}\", \"{}\", \"{}\",  \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\"
                            from sys_programs limit 1
                            """.format(
                                format, name, priority, section, size, vendor, install_time, version, architecture, 
                                multiarch, source, description, location, triaged, cpe
                            )
        db[1].execute(sqlite_insert_query)
        db[0].commit()
    except sqlite3.Error as error:
        print("Failed to insert data into sqlite table\n", error)
    finally:
        db[1].close()
        db[0].close()


def insert_vulnerability(CVEID = "WVE-000", TARGET = "RHEL7", TARGET_MINOR= "", PENDING = 0, 
    PACKAGE = "WazuhIntegrationPackage", OPERATION = "less than", OPERATION_VALUE = "2.0.0-1.el7",
    TITLE = "", SEVERITY = "critical", PUBLISHED =  datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"),
    UPDATED = "", REFERENCE = "https://github.com/wazuh/wazuh-qa", TARGET_V = "REDHAT", CVSS = "10.000000", 
    CVSS_VECTOR = "AV:N/AC:L/Au:N/C:C/I:C/A:C", RATIONALE = "Wazuh integration test vulnerability", 
    CVSS3 = "", BUGZILLA_REFERENCE = "https://github.com/wazuh/wazuh-qa", CWE = "WVE-000 -> WVE-001", 
    ADVISORIES = "RHSA-2010:0029"
):
    """
    Insert a new vulnerability in the database of vulnerabilities, with the parameters given as arguments.
    If used in conjunction with insert_package_in_db using the default arguments it will generate an alert.
    """
    try:
        db = load_db(CVE_DB_PATH)
        sqlite_insert_query_vulnerabilities = """INSERT INTO VULNERABILITIES
            (CVEID, TARGET, TARGET_MINOR, PENDING, PACKAGE, OPERATION, OPERATION_VALUE)
            VALUES 
            (\"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\")""".format(
                CVEID, TARGET, TARGET_MINOR, PENDING, PACKAGE, OPERATION, 
                OPERATION_VALUE
            )


        sqlite_insert_query_vulnerabilities_info = """INSERT INTO VULNERABILITIES_INFO 
            (ID, TITLE, SEVERITY, PUBLISHED, UPDATED, REFERENCE, TARGET, RATIONALE, CVSS, CVSS_VECTOR, CVSS3, \
                BUGZILLA_REFERENCE, CWE, ADVISORIES)
            VALUES 
            (\"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \"{}\", \
            \"{}\")""".format(
                CVEID, TITLE, SEVERITY, PUBLISHED, UPDATED, REFERENCE, TARGET_V, RATIONALE, CVSS, CVSS_VECTOR, CVSS3, 
                BUGZILLA_REFERENCE, CWE, ADVISORIES
            )
        db[1].execute(sqlite_insert_query_vulnerabilities)
        db[1].execute(sqlite_insert_query_vulnerabilities_info)
        db[0].commit()
    except sqlite3.Error as error:
        print("Failed to insert data into sqlite table\n", error)
    finally:
        db[1].close()
        db[0].close()


def update_package(version, package, agent = "000"):
    """
    Update version of installed package in databas.
    Used to simulate upgrades and downgrades of the package given as argument.
    """
    try:
        path =  os.path.join(PACKAGES_DB_PATH,"{}.db".format(agent))
        db = load_db(path)
        sqlite_update_query = "update sys_programs set version=\"{}\" where name=\"{}\";".format(version, package)
        db[1].execute(sqlite_update_query)
        db[0].commit()
    except sqlite3.Error as error:
        print("Failed to insert data into sqlite table\n", error)
    finally:
        db[1].close()
        db[0].close()