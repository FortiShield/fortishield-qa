# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import re


modulesd_prefix = r'.*wazuh-modulesd:vulnerability-detector:\s+INFO:\s+\(\d+\):\s+'


def callback_detect_vulnerability_scan_started(line):
    msg = r'.*wazuh-modulesd:vulnerability-detector.* INFO:.*Starting vulnerability scanning'
    match = re.match(msg, line)

    return match is not None


def callback_detect_vulnerability_scan_finished(line):
    msg = r'.*wazuh-modulesd:vulnerability-detector.* INFO:.*Vulnerability scanning finished'
    match = re.match(msg, line)
    return match is not None


def callback_detect_vulnerability_scan_sleeping(line):
    msg = r'.*wazuh-modulesd:vulnerability-detector.* Sleeping for (.*)...'
    match = re.match(msg, line)

    return match.group(1) if match is not None else ""


def callback_detect_vulnerability_detector_disabled(line):
    msg = r'(.*)wazuh-modulesd:vulnerability-detector(.*)DEBUG: Module disabled. Exiting...'
    match = re.match(msg, line)

    return match is not None


def callback_detect_vulnerability_detector_enabled(line):
    msg = r'(.*)wazuh-modulesd:vulnerability-detector(.*)'
    match1 = re.match(msg, line)
    msg = r'(.*)DEBUG: Module disabled. Exiting...(.*)'
    match2 = re.match(msg, line)

    return match1 is not None and match2 is None


def make_callback(pattern):
    """
    Creates a callback function from a text pattern.

    It already contains the vulnerability-detector prefix.

    Parameters
    ----------
    pattern : str
        String to match on the log

    >>> callback_bionic_update_started = make_callback("Starting Ubuntu Bionic database update")
    """
    pattern = r'\s+'.join(pattern.split())
    msg = modulesd_prefix + pattern
    regex = re.compile(msg)
    def _callback(line):
        match = regex.match(line)
        return match is not None
    return _callback


def callback_detect_no_feeds_downloaded(line):
    """This tests that no feeds are being downloaded"""
    update_regex = re.compile(modulesd_prefix + 'Starting.*database\s+update')
    scan_regex = re.compile(modulesd_prefix + 'Starting\s+vulnerability\s+scanning')
    update = update_regex.match(line)
    if update:
        raise Exception("A feed download was detected")
    scan = scan_regex.match(line)  # success: scan started without downloading any feeds
    return scan is not None
