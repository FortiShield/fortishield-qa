'''
copyright:
    Copyright (C) 2015-2021, Wazuh Inc.

    Created by Wazuh, Inc. <info@wazuh.com>.

    This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type:
    integration

description:
    These tests will verify if the `analysisd` daemon correctly handles alerts generated
    from the received Windows registry-related events.

tiers:
    - 2

component:
    manager

path:
    tests/integration/test_analysisd/test_all_syscheckd_configurations/

daemons:
    - analysisd
    - syscheckd
    - wazuh-db

os_support:
    - linux, rhel5
    - linux, rhel6
    - linux, rhel7
    - linux, rhel8
    - linux, amazon linux 1
    - linux, amazon linux 2
    - linux, debian buster
    - linux, debian stretch
    - linux, debian wheezy
    - linux, ubuntu bionic
    - linux, ubuntu xenial
    - linux, ubuntu trusty
    - linux, arch linux

coverage:

pytest_args:

tags:

'''
import os

import pytest
import yaml
from wazuh_testing.analysis import validate_analysis_alert_complex
from wazuh_testing.tools import WAZUH_PATH, LOG_FILE_PATH, ALERT_FILE_PATH
from wazuh_testing.tools.monitoring import ManInTheMiddle

# Marks

pytestmark = [pytest.mark.linux, pytest.mark.tier(level=2), pytest.mark.server]

# Configurations

test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
messages_path = os.path.join(test_data_path, 'syscheck_registry_events_win32.yaml')

with open(messages_path) as f:
    test_cases = yaml.safe_load(f)

# Variables

log_monitor_paths = [LOG_FILE_PATH, ALERT_FILE_PATH]
analysis_path = os.path.join(os.path.join(WAZUH_PATH, 'queue', 'sockets', 'queue'))

receiver_sockets_params = [(analysis_path, 'AF_UNIX', 'UDP')]

mitm_analysisd = ManInTheMiddle(address=analysis_path, family='AF_UNIX', connection_protocol='UDP')
# monitored_sockets_params is a List of daemons to start with optional ManInTheMiddle to monitor
# List items -> (wazuh_daemon: str,(
#                mitm: ManInTheMiddle
#                daemon_first: bool))
# Example1 -> ('wazuh-clusterd', None)              Only start wazuh-clusterd with no MITM
# Example2 -> ('wazuh-clusterd', (my_mitm, True))   Start MITM and then wazuh-clusterd
monitored_sockets_params = [('wazuh-db', None, None), ('wazuh-analysisd', mitm_analysisd, True)]

receiver_sockets, monitored_sockets, log_monitors = None, None, None  # Set in the fixtures

events_dict = {}
alerts_list = []
analysisd_injections_per_second = 200


# Fixtures


@pytest.fixture(scope='module', params=range(len(test_cases)))
def get_alert(request):
    return alerts_list[request.param]


def test_validate_all_win32_registry_alerts(configure_sockets_environment, connect_to_sockets_module,
                                            wait_for_analysisd_startup, generate_events_and_alerts, get_alert):
    '''
    description:
        Check that the alerts generated by `analysisd` from Windows systems registry-related events are valid.
        The `validate_analysis_alert_complex` function checks if an `analysisd` alert is
        properly formatted in reference to its `syscheck` event.

    wazuh_min_version:
        4.1

    parameters:
        - configure_sockets_environment:
            type: fixture
            brief: Configure environment for sockets and MITM.

        - connect_to_sockets_module:
            type: fixture
            brief: Module scope version of `connect_to_sockets` fixture.

        - wait_for_analysisd_startup:
            type: fixture
            brief: Wait until analysisd has begun and alerts.json is created.

        - generate_events_and_alerts:
            type: fixture
            brief: Read the specified yaml and generate every event and alert using the input from every test case.

        - get_alert:
            type: fixture
            brief: List of alerts to be validated.

    assertions:
        - Check that the alerts generated are consistent with the events received.

    test_input:
        Different test cases that are contained in an external `YAML` file (syscheck_events_win32.yaml)
        that includes `syscheck` events data and the expected output.

    logging:
        - ossec.log:
            - "Multiple values located in the `syscheck_events_win32.yaml` file."

        - alerts.json:
            -"Multiple values located in the `syscheck_events_win32.yaml` file."

    tags:

    '''
    alert = get_alert
    path = alert['syscheck']['path']
    mode = alert['syscheck']['event'].title()

    try:
        value_name = alert['syscheck']['value_name']
        path += '\\' + value_name
    except KeyError:
        pass

    validate_analysis_alert_complex(alert, events_dict[path][mode], schema='win32')
