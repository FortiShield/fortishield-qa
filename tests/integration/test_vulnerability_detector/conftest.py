# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import time
import pytest

from subprocess import CalledProcessError

import wazuh_testing.db_interface.agent_db as adb
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.tools.file import truncate_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.mocking import create_mocked_agent, delete_mocked_agent
from wazuh_testing.db_interface import cve_db
from wazuh_testing.mocking import set_system
from wazuh_testing import db_interface as dbi
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.db_interface import cve_db, agent_db
from wazuh_testing.tools.time import get_current_timestamp


@pytest.fixture(scope='module')
def restart_modulesd(get_configuration, request):
    """Restart modulesd daemon, reset the logs file and start a new monitor."""
    control_service('stop', daemon='wazuh-modulesd')
    truncate_file(LOG_FILE_PATH)
    file_monitor = FileMonitor(LOG_FILE_PATH)
    setattr(request.module, 'wazuh_log_monitor', file_monitor)
    try:
        control_service('start', daemon='wazuh-modulesd')
    except ValueError:
        pass


@pytest.fixture(scope='module')
def clean_vuln_tables(request):
    """Clean vulnerabilities tables """
    agent_db.clean_sys_programs()
    cve_db.clean_all_cve_tables()

    yield

    agent_db.clean_sys_programs()
    cve_db.clean_all_cve_tables()


@pytest.fixture
def restart_modulesd_catching_ossec_conf_error(request):
    control_service('stop', daemon='wazuh-modulesd')
    truncate_file(LOG_FILE_PATH)
    file_monitor = FileMonitor(LOG_FILE_PATH)
    setattr(request.module, 'wazuh_log_monitor', file_monitor)
    try:
        control_service('start', daemon='wazuh-modulesd')
    except (ValueError, CalledProcessError):
        pass


@pytest.fixture(scope='session')
def mock_agent():
    """
    Fixture to create a mocked agent in wazuh databases
    """
    agent_id = create_mocked_agent(name="mocked_agent")

    yield agent_id

    delete_mocked_agent(agent_id)


@pytest.fixture(scope='module')
def check_cve_db():
    """
    Fixture to check if the CVE database exists and its tables are created
    """
    def cve_tables_created():
        query_string = "SELECT count(*) FROM sqlite_master WHERE type='table'"
        query_result = int(dbi.get_sqlite_query_result(dbi.CVE_DB_PATH, query_string)[0])
        return query_result == vd.CVE_NUM_TABLES

    db_status_ok = False
    attempts = 0

    while not db_status_ok:
        if os.path.exists(dbi.CVE_DB_PATH) and cve_tables_created():
            db_status_ok = True
        attempts += 1

        if attempts > 30:
            raise AttributeError("Could not check that CVE database or its tables exist")

        time.sleep(1)


@pytest.fixture(scope='function')
def after_execution_clean_vuln_tables_function():
    """Clean vulnerabilities tables."""
    yield
    agent_db.clean_sys_programs()
    cve_db.clean_all_cve_tables()


@pytest.fixture(scope='function')
def restart_modulesd_function():
    """Restart wazuh-modulesd daemon before starting a test, and stop it after finishing"""
    control_service('restart', daemon='wazuh-modulesd')
    yield
    control_service('stop', daemon='wazuh-modulesd')


@pytest.fixture(scope='function')
def clean_cve_tables_func():
    """Clean all tables of the CVE database before and after finishing the test"""
    cve_db.clean_all_cve_tables()
    yield
    cve_db.clean_all_cve_tables()


@pytest.fixture(scope='function')
def prepare_baseline_scan_with_vuln_packages(mock_agent_function):
    """Add a mocked agent with mocked packages and force the baseline scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the baseline scan
    agent_db.update_last_full_scan(0, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_full_scan_with_vuln_packages(mock_agent_function):
    """Add a mocked agent with mocked packages and force the full scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the full scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_full_scan_with_vuln_package(mock_agent_function):
    """Add a mocked agent with only a mocked vulnerable package and force the full scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function, count=1)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the full scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_full_scan_with_obsolete_vulnerabilities(mock_agent_function):
    """Add a mocked agent with mocked packages and force the full scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerability data in vulnerabilities inventory
    vd.insert_vulnerabilities_agent_inventory(agent_id=mock_agent_function, status='OBSOLETE')

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the full scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_partial_scan_with_vuln_packages(mock_agent_function):
    """Add a mocked agent with mocked packages and force the partial scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the partial scan
    agent_db.update_last_full_scan(int(get_current_timestamp()), agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_partial_scan_with_vuln_package(mock_agent_function):
    """Add a mocked agent with only a mocked vulnerable package and force the partial scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function, count=1)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the partial scan
    agent_db.update_last_full_scan(int(get_current_timestamp()), agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_partial_scan_with_obsolete_vulnerabilities(mock_agent_function):
    """Add a mocked agent with mocked packages and force the partial scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerability data in vulnerabilities inventory
    vd.insert_vulnerabilities_agent_inventory(agent_id=mock_agent_function, status='OBSOLETE')

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the partial scan
    agent_db.update_last_full_scan(int(get_current_timestamp()), agent_id=mock_agent_function)

    yield mock_agent_function
