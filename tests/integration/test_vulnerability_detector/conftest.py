# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
import pytest
from subprocess import CalledProcessError

from wazuh_testing.tools.services import control_service
from wazuh_testing.db_interface import cve_db, agent_db
from wazuh_testing.tools.time import get_current_timestamp
from wazuh_testing.modules import vulnerability_detector as vd


@pytest.fixture(scope='module')
def clean_vuln_tables(request):
    """Clean vulnerabilities tables """
    agent_db.clean_sys_programs()
    cve_db.clean_all_cve_tables()

    yield

    agent_db.clean_sys_programs()
    cve_db.clean_all_cve_tables()


@pytest.fixture
def restart_modulesd_catching_ossec_conf_error(request):
    """Restart wazuh-modulesd ignoring the process error"""
    control_service('stop', daemon='wazuh-modulesd')
    try:
        control_service('start', daemon='wazuh-modulesd')
    except (ValueError, CalledProcessError):
        pass


@pytest.fixture(scope='function')
def restart_modulesd_function():
    """Restart wazuh-modulesd daemon before starting a test, and stop it after finishing"""
    control_service('restart', daemon='wazuh-modulesd')
    yield
    control_service('stop', daemon='wazuh-modulesd')


@pytest.fixture(scope='function')
def clean_cve_tables_func():
    """Clean all tables of the CVE database before and after finishing the test"""
    cve_db.clean_all_cve_tables()
    yield
    cve_db.clean_all_cve_tables()


@pytest.fixture(scope='module')
def clean_cve_tables_module():
    """Clean all tables of the CVE database before and after finishing the tests module"""
    cve_db.clean_all_cve_tables()
    yield
    cve_db.clean_all_cve_tables()


@pytest.fixture(scope='function')
def prepare_baseline_scan_with_vuln_packages(mock_agent_function):
    """Add a mocked agent with mocked packages and force the baseline scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the baseline scan
    agent_db.update_last_full_scan(0, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_full_scan_with_vuln_packages(mock_agent_function):
    """Add a mocked agent with mocked packages and force the full scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the full scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_full_scan_with_vuln_package(mock_agent_function):
    """Add a mocked agent with only a mocked vulnerable package and force the full scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function, count=1)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the full scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_full_scan_with_obsolete_vulnerabilities(mock_agent_function):
    """Add a mocked agent with mocked packages and force the full scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerability data in vulnerabilities inventory
    vd.insert_vulnerabilities_agent_inventory(agent_id=mock_agent_function, status='OBSOLETE')

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the full scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_partial_scan_with_vuln_packages(mock_agent_function):
    """Add a mocked agent with mocked packages and force the partial scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the partial scan
    agent_db.update_last_full_scan(int(get_current_timestamp()), agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_partial_scan_with_vuln_package(mock_agent_function):
    """Add a mocked agent with only a mocked vulnerable package and force the partial scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function, count=1)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the partial scan
    agent_db.update_last_full_scan(int(get_current_timestamp()), agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_partial_scan_with_obsolete_vulnerabilities(mock_agent_function):
    """Add a mocked agent with mocked packages and force the partial scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerability data in vulnerabilities inventory
    vd.insert_vulnerabilities_agent_inventory(agent_id=mock_agent_function, status='OBSOLETE')

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the partial scan
    agent_db.update_last_full_scan(int(get_current_timestamp()), agent_id=mock_agent_function)

    yield mock_agent_function
