'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os
import pytest

from wazuh_testing.tools import configuration
from wazuh_testing.tools.time import time_to_seconds
from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=1)]

# Paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
FEEDS_PATH = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'data')
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'providers_update_interval.yaml')
test_enabled_cases_path = os.path.join(TEST_CASES_PATH, 'test_providers_update_interval.yaml')

# Configuration
configuration_parameters, configuration_metadata, test_case_ids = get_test_cases_data(test_enabled_cases_path)
configurations = load_configuration_template(configurations_path, configuration_parameters, configuration_metadata)

to_modify = ['CUSTOM_ALAS_JSON_FEED_PATH', 'CUSTOM_REDHAT_JSON_FEED_PATH', 'CUSTOM_CANONICAL_JSON_FEED_PATH',
             'CUSTOM_DEBIAN_JSON_FEED_PATH', 'CUSTOM_NVD_JSON_FEED_PATH', 'CUSTOM_ARCHLINUX_JSON_FEED_PATH']
new_values = [os.path.join(FEEDS_PATH, vd.CUSTOM_ALAS_JSON_FEED),
              os.path.join(FEEDS_PATH, vd.CUSTOM_REDHAT_JSON_FEED),
              os.path.join(FEEDS_PATH,vd.CUSTOM_CANONICAL_OVAL_FEED),
              os.path.join(FEEDS_PATH, vd.CUSTOM_DEBIAN_JSON_FEED),
              os.path.join(FEEDS_PATH, vd.CUSTOM_NVD_FEED),
              os.path.join(FEEDS_PATH, vd.CUSTOM_ARCHLINUX_JSON_FEED)]
configuration_metadata = configuration.update_configuration_template(configuration_metadata, to_modify, new_values)


@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_update_interval(configuration, metadata, set_wazuh_configuration, truncate_log_files, clean_cve_tables_func,
                         restart_modulesd_function):
    '''
    description: Check if the provider database update is triggered after the set interval time has passed. To do this,
                 it checks that the feed update is not started prematurely by checking the log file. It then travels
                 forward in time, specifically to five seconds after the expiration of the time set in the
                 update_interval option. Finally, it checks through the log file that the update of the feeds is started
                 after this period.

    wazuh_min_version: 4.2.0

    parameters:
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: fixture
            brief: Reset the logs file and start a new monitor.

    assertions:
        - Verify that the update has not started prematurely.
        - Verify that the feed is downloaded after the set update interval.

    input_description:
        - Test cases are found in the test module and include parameters for the `update_interval` tag of the provider
          option. The `wazuh_providers_update_interval.yaml` file provides the configuration of this module for this
          test.

    expected_output:
        - r'Unexpected event .* database updating'
        - r'Could not find the provider .* updating feed log after the interval update'
        - 'Starting .* database update'
    '''
    provider = metadata['provider']
    interval_update_time = time_to_seconds(metadata['update_interval'])

    evm.check_provider_database_update_start_log(provider, interval_update_time)
