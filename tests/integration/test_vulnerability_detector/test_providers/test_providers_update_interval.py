'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os
from time import sleep
import pytest
import timeit

from wazuh_testing.tools import configuration
from wazuh_testing.tools.time import time_to_seconds
from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm

# Marks
pytestmark = [pytest.mark.server]

# Paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
FEEDS_PATH = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'data')
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'providers_update_interval.yaml')
test_enabled_cases_path = os.path.join(TEST_CASES_PATH, 'test_update_interval.yaml')

# Configuration
configuration_parameters, configuration_metadata, test_case_ids = get_test_cases_data(test_enabled_cases_path)
configurations = load_configuration_template(configurations_path, configuration_parameters, configuration_metadata)

to_modify = ['CUSTOM_ALAS_JSON_FEED_PATH', 'CUSTOM_REDHAT_JSON_FEED_PATH', 'CUSTOM_CANONICAL_JSON_FEED_PATH',
             'CUSTOM_DEBIAN_JSON_FEED_PATH', 'CUSTOM_NVD_JSON_FEED_PATH', 'CUSTOM_ARCHLINUX_JSON_FEED_PATH']
new_values = [os.path.join(FEEDS_PATH, vd.CUSTOM_ALAS_JSON_FEED),
              os.path.join(FEEDS_PATH, vd.CUSTOM_REDHAT_JSON_FEED),
              os.path.join(FEEDS_PATH, vd.CUSTOM_CANONICAL_OVAL_FEED),
              os.path.join(FEEDS_PATH, vd.CUSTOM_DEBIAN_JSON_FEED),
              os.path.join(FEEDS_PATH, vd.CUSTOM_NVD_FEED),
              os.path.join(FEEDS_PATH, vd.CUSTOM_ARCHLINUX_JSON_FEED)]
configuration_metadata = configuration.update_configuration_template(configuration_metadata, to_modify, new_values)


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_update_interval(configuration, metadata, set_wazuh_configuration, truncate_log_files, clean_cve_tables_func,
                         restart_modulesd_function):
    '''
    description: Check if the provider feed starts downloading after the interval time set in <interval_update> tag.
                 To do this, it checks the interval time from the modulesd starts till detect the log event that the
                 provider feed update has been started.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_log_files:
            type: fixture
            brief: Truncate the log files at the end of the testing case.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - The log event arrive.
        - The interval time till starts update is the expected.

    input_description:
        - The `test_update_interval.yaml` file provides the module configuration for this test.

    expected_output:
        - r'Unexpected event .* database updating'
        - r'Could not find the provider .* updating feed log after the interval update'
        - 'Starting .* database update'
    '''
    provider_name = metadata['provider_name']
    interval_update_time = time_to_seconds(metadata['update_interval'])

    start = timeit.default_timer()
    evm.check_provider_database_update_start_log(provider_name, interval_update_time * 2)
    stop = timeit.default_timer()
    assert stop - start < 1.5 * interval_update_time
