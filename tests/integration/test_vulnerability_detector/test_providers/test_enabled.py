import os
import pytest

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import make_vuln_callback, callback_detect_no_feeds_downloaded

# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "data")
configurations_path = os.path.join(test_data_path, "wazuh_providers_enabled.yaml")

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

params = [
    {'ENABLED': 'yes', 'PROVIDER': 'canonical', 'OS': 'bionic'},
    {'ENABLED': 'yes', 'PROVIDER': 'debian', 'OS': 'buster'},
    {'ENABLED': 'yes', 'PROVIDER': 'redhat', 'OS': ''},
    {'ENABLED': 'yes', 'PROVIDER': 'nvd', 'OS': ''},

    {'ENABLED': 'no', 'PROVIDER': 'canonical', 'OS': 'bionic'},
    {'ENABLED': 'no', 'PROVIDER': 'debian', 'OS': 'buster'},
    {'ENABLED': 'no', 'PROVIDER': 'redhat', 'OS': ''},
    {'ENABLED': 'no', 'PROVIDER': 'nvd', 'OS': ''},
]

metadata = [
    {'enabled': 'yes', 'provider_name': 'Ubuntu Bionic'},
    {'enabled': 'yes', 'provider_name': 'Debian Buster'},
    {'enabled': 'yes', 'provider_name': 'Red Hat Enterprise Linux'},
    {'enabled': 'yes', 'provider_name': 'National Vulnerability Database'},
    {'enabled': 'no'},
    {'enabled': 'no'},
    {'enabled': 'no'},
    {'enabled': 'no'}
    ]

# configuration data
configurations = load_wazuh_configurations(
    configurations_path,
    __name__,
    params=params,
    metadata=metadata
)


# fixtures

@pytest.fixture(scope="module", params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_enabled(get_configuration, configure_environment, restart_modulesd):
    """
    Check if modulesd downloads the feeds from different providers when enabled is set to yes.
    """
    if get_configuration['metadata']['enabled'] == 'no':
        with pytest.raises(TimeoutError):
            wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
            callback=make_vuln_callback("Starting.+database update"))
            raise AttributeError(f'Unexpected event database updating')
    else:
        provider_name = get_configuration['metadata']['provider_name']
        wazuh_log_monitor.start(
                timeout=global_parameters.default_timeout,
                callback=make_vuln_callback("Starting {} database update".format(provider_name)),
                error_message="Could not find {} update starting log".format(provider_name),
            )
