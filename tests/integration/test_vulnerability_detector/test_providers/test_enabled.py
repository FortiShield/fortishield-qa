import os
import pytest

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import make_callback, callback_detect_no_feeds_downloaded

# Marks
pytestmark = pytest.mark.tier(level=1)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "data")
configurations_path = os.path.join(test_data_path, "wazuh_providers_enabled.yaml")

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

params = [{'ENABLED': 'yes'}, {'ENABLED': 'no'}]
metadata = [{'enabled': 'yes'}, {'enabled': 'no'}]

# configuration data
configurations = load_wazuh_configurations(
    configurations_path,
    __name__,
    params=params,
    metadata=metadata
)


# fixtures

@pytest.fixture(scope="module", params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param

# callbacks

callback_bionic_update_starting = make_callback("Starting Ubuntu Bionic database update")
callback_buster_update_starting = make_callback("Starting Debian Buster database update")
callback_redhat_update_starting = make_callback("Starting Red Hat Enterprise Linux database update")
callback_nvd_update_started = make_callback("Starting National Vulnerability Database database update")

# Tests

@pytest.mark.parametrize(
    "tags_to_apply, custom_callback, custom_error_message ",
    [
        (
            {"test_canonical_provider"},
            callback_bionic_update_starting,
            "Could not find Canonical update starting log",
        ),
        (
            {"test_debian_provider"},
            callback_buster_update_starting,
            "Could not find Debian update starting log",
        ),
        (
            {"test_redhat_provider"},
            callback_redhat_update_starting,
            "Could not find RedHat update starting log",
        ),
        (
            {"test_nvd_provider"},
            callback_nvd_update_started,
            "Could not find NVD update starting log",
        ),
    ],
)
def test_enabled(
    tags_to_apply,
    custom_callback,
    custom_error_message,
    get_configuration,
    configure_environment,
    restart_modulesd,
):

    """
    Check if modulesd downloads the feeds from different providers when enabled is set to yes.

    
    Parameters
    ----------
    custom_callback : function
        Callback that will be applied to the value of tags to apply.
    custom_error_message : str
        Custom error message that will be shown if the test fails.
    """
    if get_configuration['metadata']['enabled'] == 'no':
        custom_callback = callback_detect_no_feeds_downloaded
        custom_error_message = "A feed download was detected with enabled set to no"

    check_apply_test(tags_to_apply, get_configuration["tags"])
    wazuh_log_monitor.start(
            timeout=15,
            callback=custom_callback,
            error_message=custom_error_message,
        )
