import os
import pytest

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import make_vuln_callback

# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "data")
configurations_path = os.path.join(test_data_path, "wazuh_providers_os.yaml")

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

params = [
    {'PROVIDER': 'canonical', 'OS': 'trusty'},
    {'PROVIDER': 'canonical', 'OS': 'xenial'},
    {'PROVIDER': 'canonical', 'OS': 'bionic'},
    {'PROVIDER': 'debian', 'OS': 'wheezy'},
    {'PROVIDER': 'debian', 'OS': 'stretch'},
    {'PROVIDER': 'debian', 'OS': 'jessie'},
    {'PROVIDER': 'debian', 'OS': 'buster'},
]

metadata = [
    {'enabled': 'yes', 'provider_name': 'Ubuntu Trusty'},
    {'enabled': 'yes', 'provider_name': 'Ubuntu Xenial'},
    {'enabled': 'yes', 'provider_name': 'Ubuntu Bionic'},
    {'enabled': 'yes', 'provider_name': 'Debian Wheezy'},
    {'enabled': 'yes', 'provider_name': 'Debian Stretch'},
    {'enabled': 'yes', 'provider_name': 'Debian Jessie'},
    {'enabled': 'yes', 'provider_name': 'Debian Buster'},
    ]

ids = [f"{item['PROVIDER']}-{item['OS']}" for item in params]

# configuration data
configurations = load_wazuh_configurations(
    configurations_path,
    __name__,
    params=params,
    metadata=metadata
)


# fixtures

@pytest.fixture(scope="module", params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_providers(get_configuration, configure_environment, restart_modulesd):
    """
    Check if modulesd downloads the feeds for each os
    """
    provider_name = get_configuration['metadata']['provider_name']
    wazuh_log_monitor.start(
            timeout=global_parameters.default_timeout,
            callback=make_vuln_callback(f"Starting {provider_name} database update"),
            error_message=f"Could not find {provider_name} update starting log",
        )
