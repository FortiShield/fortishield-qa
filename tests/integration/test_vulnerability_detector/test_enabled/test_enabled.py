import os
import pytest

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, \
    check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import \
    callback_detect_vulnerability_detector_disabled, \
    callback_detect_vulnerability_detector_enabled

# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_conf.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

parameters = [{'ENABLED': 'yes'}, {'ENABLED': 'no'}]
metadata= [{'enabled': 'yes'}, {'enabled': 'no'}]

# Configuration data
configurations = load_wazuh_configurations(
    configurations_path, __name__, params=parameters, metadata=metadata)

# fixtures

@pytest.fixture(scope='module', params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param

# Tests

@pytest.mark.parametrize('tags_to_apply, custom_callback, custom_error_message', 
  [
    ({'enabled'}, callback_detect_vulnerability_detector_disabled,
        'Vulnerability detector is enabled'),
    ({'disabled'}, callback_detect_vulnerability_detector_enabled,
        'Vulnerability detector is diabled')
  ]
)


def test_enabled(tags_to_apply, custom_callback, custom_error_message, 
                      get_configuration, configure_environment,
                      restart_modulesd):
    """
    Check if is enabled when the enabled parameter is set to 'yes'
    ----------
    custom_callback : function
        Callback that will be applied to the value of tags to apply.
    custom_error_message : str
        Custom error message that will be shown if the test fails.
    """

    check_apply_test(tags_to_apply, get_configuration['tags'])

    if get_configuration['metadata']['enabled'] == 'yes':

        wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
                                callback=custom_callback,
                                error_message=custom_error_message)
    else:
        with pytest.raises(TimeoutError):
            event = wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
                                            callback=custom_callback,
                                            error_message=custom_error_message)
            raise AttributeError(f'Unexpected event {event}')
