# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json
import wazuh_testing.vulnerability_detector as vd

from time import sleep
from shutil import copy
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file, compress_gzip_file
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=1)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
custom_msu_json_path = os.path.join(test_data_path, 'custom_msu.json')
configurations_path = os.path.join(test_data_path, 'wazuh_msu_inventory.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)


# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED),
                'MSU_JSON_PATH': custom_msu_json_path}]
metadata = [{'nvd_json_path': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED),
                'msu_json_path': custom_msu_json_path}]
ids = ['msu_scan_configuration']

# read vulnerabilities
with open(custom_msu_json_path, 'r') as f:
    vulnerabilities = json.loads(f.read())

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)

system_data = [
        {"target": "WINDOWS10", "os_name": "Microsoft Windows Server 2010 Evaluation", "os_major": "10", "os_release": "1607",
        "os_minor": "0", "name": "windows", "hotfixes" : ["KB4550947", "4540670"]},
        {"target": "WINDOWS_SERVER_2016", "os_name": "Microsoft Windows Server 2016", "os_major": "10", "os_release": "1807",
        "os_minor": "0", "name": "windows", "hotfixes" : ["4534271","4556813"]},
        {"target": "WINDOWS_SERVER_2019", "os_name": "Microsoft Windows Server 2019", "os_major": "10", "os_release": "1907",
        "os_minor": "0", "name": "windows", "hotfixes": ["4534275"]},
]

system_data_ids = [system['target'] for system in system_data]
MODULESD_PREFIX = r'.*wazuh-modulesd.*'

@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param

@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
def mock_vulnerability_scan(request):
    control_service('stop', daemon='wazuh-db')

    sleep(5)

    vd.clean_vd_tables(agent='000')

    #Modify the necessary databases
    vd.modify_system(os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=request.param['name'])
    
    vd.insert_osinfo(os_name=request.param['os_name'], os_release=request.param['os_release'])
    
    for patch in request.param["hotfixes"]:
        vd.insert_hotfix(hotfix=patch)

    control_service('start', daemon='wazuh-db')

    # Truncate ossec.log
    truncate_file(LOG_FILE_PATH)

    yield request.param

    control_service('stop', daemon='wazuh-db')

    # Clean tables
    vd.clean_vd_tables(agent='000')

    control_service('start', daemon='wazuh-db')


def test_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd,
                                mock_vulnerability_scan):
    """
    Check if a missing patch triggers a vulnerability(only windows)
    """
    hotfixes = mock_vulnerability_scan['hotfixes']
    dep = vulnerabilities['dependencies']

    for cve, item in vulnerabilities['vulnerabilities'].items():
        installed, hotfix = is_hotfix_installed(item[0]['patch'], dep, hotfixes)
        if installed:
            with pytest.raises(TimeoutError):
                vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor, log_event=fr".*{cve}.*",
                                    update_position=False, timeout=15, prefix=MODULESD_PREFIX)
                raise AttributeError(f'Unexpected CVE message {vd.callback_system_log}')
        else:
            wazuh_log_monitor.start(
                timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                update_position=False,
                callback=vd.make_vuln_callback(
                    f"Agent '000' is vulnerable to '{cve}'. Condition: '{hotfix} patch is not installed.'"
                ),
                error_message=f"Could not find the report which says that the system" +
                f"is vulnerable to {cve} due to missing {hotfix}"
            )

def is_hotfix_installed(cve_patch, dependencies, hotfixes):
    """
    Check if the given CVE's hotfix or at least one of its supersedences are installed.

    Parameters
    ----------
    cve_patch: str
        Patch that fixes the CVE being analyzed.
    dependencies: str
        The complete list of dependencies in the MSU.
    hotfixes: str
        The patches installed in the agent.
    """
    installed = False
    hotfix = cve_patch

    for base, supersedence in dependencies.items():
        if cve_patch == base:
            for super_patch in supersedence:
                if super_patch in hotfixes:
                    installed = True
                    hotfix = super_patch

    return installed, hotfix     
        
