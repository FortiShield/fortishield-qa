# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json
from time import sleep
from shutil import copy

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file, compress_gzip_file
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=0)


# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_nvd_configuration.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, vd.VULNERABILITIES)
custom_cpe_helper_data_path = os.path.join(test_data_path, vd.CUSTOM_CPE_HELPER)
custom_msu_data_path = os.path.join(test_data_path, vd.CUSTOM_MSU)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
SCAN_TIMEOUT = 40


compress_gzip_file(custom_msu_data_path, vd.MSU_PATH)

copy(custom_cpe_helper_data_path, vd.CPE_HELPER_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED)}]
metadata = [{'nvd_json_path': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED)}]
ids = ['scan_nvd_configuration']

# Read JSON data template
with open(vulnerabilities_data_path, 'r') as f:
    nvd_vulnerabilities = json.loads(f.read())


system_data = [
    {"target": "WINDOWS10", "os_name": "Microsoft Windows Server 2016 Datacenter Evaluation", "os_major": "10",
        "os_minor": "0", "name": "windows", "format": "win",
        "vulnerabilities_number": len(nvd_vulnerabilities['vulnerabilities_nvd']) +
        len(nvd_vulnerabilities['vulnerabilities_hotfix'])},
    {"target": "RHEL8", "os_name": "CentOS Linux", "os_major": "8", "os_minor": "1", "name": "centos8",
        "format": "rpm", "vulnerabilities_number": 0},
    {"target": "RHEL7", "os_name": "CentOS Linux", "os_major": "7", "os_minor": "8", "name": "centos7",
        "format": "rpm", "vulnerabilities_number": 0},
    {"target": "RHEL6", "os_name": "CentOS Linux", "os_major": "6", "os_minor": "10", "name": "centos6",
        "format": "rpm", "vulnerabilities_number": 0},
    {"target": "RHEL5", "os_name": "CentOS Linux", "os_major": "5", "os_minor": "11", "name": "centos5",
        "format": "rpm", "vulnerabilities_number": 0},
    {"target": "BIONIC", "os_name": "Ubuntu", "os_major": "18", "os_minor": "04", "name": "Ubuntu-bionic",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['vulnerabilities_nvd'])},
    {"target": "XENIAL", "os_name": "Ubuntu", "os_major": "16", "os_minor": "04", "name": "Ubuntu-xenial",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['vulnerabilities_nvd'])},
    {"target": "TRUSTY", "os_name": "Ubuntu", "os_major": "14", "os_minor": "04", "name": "Ubuntu-trusty",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['vulnerabilities_nvd'])},
    {"target": "BUSTER", "os_name": "Debian GNU/Linux", "os_major": "10", "os_minor": "", "name": "debian10",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['vulnerabilities_nvd'])},
    {"target": "STRETCH", "os_name": "Debian GNU/Linux", "os_major": "9", "os_minor": "", "name": "debian9",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['vulnerabilities_nvd'])},
    {"target": "JESSIE", "os_name": "Debian GNU/Linux", "os_major": "8", "os_minor": "", "name": "debian8",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['vulnerabilities_nvd'])},
    {"target": "WHEEZY", "os_name": "Debian GNU/Linux", "os_major": "7", "os_minor": "", "name": "debian7",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['vulnerabilities_nvd'])},
]
system_data_ids = [system['target'] for system in system_data]


# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
def mock_vulnerability_scan(request):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    control_service('stop', daemon='wazuh-db')

    # Wait until modulesd is restarted to avoid overwriting the system
    sleep(5)

    # Mock system
    vd.modify_system(os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=request.param['name'])

    # Clean tables
    vd.clean_vd_tables(agent='000')

    # Insert hotfix and os_info for windows test
    if request.param['format'] == "win":
        vd.insert_osinfo()
        vd.insert_hotfix()
    # Insert a vulnerability in table VULNERABILITIES
    vd.insert_vulnerability(cveid='CWE-000', operation='less than', operation_value='1.0.0',
                            package='test', target=request.param['target'])

    # Add custom vulnerabilities and feeds
    for vulnerability in nvd_vulnerabilities['vulnerabilities_nvd']:
        vd.insert_package(**vulnerability['package'], source=vulnerability['package']['name'],
                          format=request.param['format'], agent="000")

    control_service('start', daemon='wazuh-db')

    # Truncate ossec.log
    truncate_file(LOG_FILE_PATH)

    yield request.param

    control_service('stop', daemon='wazuh-db')

    # Clean tables
    vd.clean_vd_tables(agent='000')

    sleep(1)

    control_service('start', daemon='wazuh-db')


def check_vulnerability_event(package, cve):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector.

    Parameters
    ----------
    package: str
        Name of custom package to check. Example: 'firefox-0'
    cve : str
        Package CVE. Example: 'CVE-2019-11764'
    """
    wazuh_log_monitor.start(
        timeout=SCAN_TIMEOUT,
        update_position=False,
        callback=vd.make_vuln_callback(f"The '{package}' package .* from agent .* is vulnerable to '{cve}'"),
        error_message=f"Could not find the report which says that the package {package} is vulnerable with {cve}"
    )


def check_vulnerability_hotfix_event(patch, cve):
    """
    Check if a missing patch triggers a vulnerability(only windows)

    Parameters
    ----------
    package: str
        Name of custom package to check. Example: 'firefox-0'
    cve : str
        Package CVE. Example: 'CVE-2019-11764'
    """
    wazuh_log_monitor.start(
        timeout=SCAN_TIMEOUT,
        update_position=False,
        callback=vd.make_vuln_callback(
            f"Agent '000' is vulnerable to '{cve}'. Condition: '{patch} patch is not installed.'"
        ),
        error_message=f"Could not find the report which says that the system" +
        f"is vulnerable to {cve} due to missing {patch}"
    )


def test_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd,
                                mock_vulnerability_scan):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector
    """
    vulnerabilities_number = mock_vulnerability_scan["vulnerabilities_number"]
    if mock_vulnerability_scan["format"] == "win":
        for item in nvd_vulnerabilities['vulnerabilities_hotfix']:
            check_vulnerability_hotfix_event(item['hotfix']['patch'], item['cve']['cveid'])

    # Check the vulnerabilities of packages inserted
    if vulnerabilities_number > 0:
        for item in nvd_vulnerabilities['vulnerabilities_nvd']:
            check_vulnerability_event(item['package']['name'], item['cve']['cveid'])

    # Check that the number of NVD vulnerabilities is the expected
    if mock_vulnerability_scan["format"] != "win":
        wazuh_log_monitor.start(
            timeout=SCAN_TIMEOUT,
            update_position=False,
            callback=vd.make_vuln_callback(
                f"A total of '{vulnerabilities_number}' vulnerabilities have been reported for agent '.*' " +
                "thanks to the 'NVD' feed."
            ),
            error_message=f"The expected number of vulnerabilities for NVD have not been found",
        )
