'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os
import pytest

from wazuh_testing.tools import configuration
from wazuh_testing.modules.vulnerability_detector.utils import check_vulnerability_scan_inventory
from wazuh_testing.db_interface import agent_db
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules.vulnerability_detector import alert_monitor as alm


# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
CUSTOM_FEED_PATH = os.path.join(os.path.dirname(os.getcwd()), 'integration', 'test_vulnerability_detector', 'data')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'scan_result_alert_vulnerability_removal.yaml')
test_alert_vuln_removal_path = os.path.join(TEST_CASES_PATH, 'cases_alert_vulnerability_removal.yaml')

# Custom feeds path
rhel_oval_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)
rhel_json_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', vd.CUSTOM_REDHAT_JSON_FEED)
nvd_json_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', vd.CUSTOM_NVD_FEED)

# Test configurations
configuration_parameters, configuration_metadata, test_case_ids = configuration.get_test_cases_data(
    test_alert_vuln_removal_path)
configurations = configuration.load_configuration_template(configurations_path, configuration_parameters,
                                                           configuration_metadata)

# Set offline custom feeds configuration
to_modify = ['RHEL_FEED_PATH', 'RHEL_JSON_FEED_PATH', 'NVD_JSON_FEED_PATH']
new_values = [rhel_oval_feed_path, rhel_json_feed_path, nvd_json_feed_path]
configurations = configuration.update_configuration_template(configurations, to_modify, new_values)
configuration_metadata = configuration.update_configuration_template(configuration_metadata, to_modify, new_values)

# Set of package to insert in the DB
test_packet_vendor = 'WazuhIntegrationTests'
test_packet_version = '1.0.0'
test_packet_version_not_vulnerable = '2.1.0'
test_packet_0_name = 'wazuhintegrationpackage-0'
test_packet_1_name = 'wazuhintegrationpackage-1'
test_packet_0_cve = 'CVE-000'
test_packet_1_cve = 'CVE-001'


# fixtures
@pytest.fixture(scope='function')
def prepare_evironment():
    """
    It mocks an agent with syscollector packages in a synced state
    """
    agent_db.insert_package(name=test_packet_0_name, vendor=test_packet_vendor,
                            version=test_packet_version, source='NULL')
    agent_db.insert_package(name=test_packet_1_name, vendor=test_packet_vendor,
                            version=test_packet_version, source='NULL')

    # Force sync status for packages
    agent_db.update_sync_info()

    yield

    agent_db.clean_vulnerabilities_inventory()


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_alert_vulnerability_removal(configuration, metadata, set_wazuh_configuration, truncate_log_files,
                                     truncate_json_alerts, clean_cve_tables_func, prepare_evironment,
                                     restart_modulesd_function):
    '''
    description: Check that the Vulnerability Detector module generates an alert when a vulnerability is removed from
                 the inventory. To do this, the manager is configured to use custom feeds that include vulnerabilities
                 associated with two test packages. Those packages are added to the database of the simulated agent and
                 then, one of the test packages will be removed and the other will be upgraded to a non-vulnerable
                 version. These situations should generate alerts. Finally, it generate a PARTIAL_SCAN type and, after
                 it is finished, the alerts that should have been generated after the removal of the vulnerabilities
                 are searched for.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_log_files:
            type: fixture
            brief: Truncate the log files at the end of the testing case.
        - truncate_json_alerts:
            type: fixture
            brief: Truncate the json files at the end of the testing case.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - prepare_evironment:
            type: fixture
            brief: Inserte vulnerable package to an agent and finally clean the database.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - The update of the feed has been finished successfully.
        - The partial scan will be run on the agent.
        - The finished vulnerability assessment for the agent.

    input_description:
        -  The `case_alert_vulnerability_removal.yaml` file provides the module configuration for this test.

    expected_output:
        - 'The update of the <provider_name> feed finished'
        - 'A partial scan will be run on agent <agent_id>'
        - 'Finished vulnerability assessment for agent <agent_id>'
        - '<test_packet_cve> affecting <test_packet_name> was eliminated'
    '''
    # Check the oval feed of redhat was updated
    evm.check_provider_database_update_finish_log(metadata['provider_name_1'])

    # Check the JSON feed of redhat was updated
    evm.check_provider_database_update_finish_log(metadata['provider_name_2'])

    # Check the JSON feed of NVD was updated
    evm.check_provider_database_update_finish_log(metadata['provider_name_3'])

    # Delete test package 0.
    agent_db.delete_package(package=test_packet_0_name)

    # Update test package 1 to a non-vulnerable version.
    agent_db.update_package(package=test_packet_1_name, version=test_packet_version_not_vulnerable)

    # Forcing a partial-scan
    agent_db.update_last_full_scan(0)

    # Detect a partial scan.
    evm.check_partial_scan_start_log()

    # Detect a partial scan completion.
    evm.check_partial_scan_end_log()

    # Ensure the removal of test package 0 has generated an alert.
    alm.check_removal_package_alert(test_packet_0_cve, test_packet_0_name)

    # Ensure the test package update 1 has generated an alert.
    alm.check_removal_package_alert(test_packet_1_cve, test_packet_1_name)

    # Check the vulnerabilities removal
    check_vulnerability_scan_inventory(package=test_packet_0_name, version=test_packet_version,
                                       arch='x86_64', cve=test_packet_0_cve, condition='removed')

    check_vulnerability_scan_inventory(package=test_packet_1_name,
                                       arch='x86_64', version=test_packet_version_not_vulnerable,
                                       cve=test_packet_1_cve, condition='removed')
