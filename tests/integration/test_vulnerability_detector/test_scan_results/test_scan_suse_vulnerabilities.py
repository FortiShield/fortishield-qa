'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6
    - SUSE Enterprise Desktop 11
    - SUSE Enterprise Desktop 12
    - SUSE Enterprise Desktop 15
    - SUSE Enterprise Server 11
    - SUSE Enterprise Server 12
    - SUSE Enterprise Server 15

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - scan_results
'''
import os
import pytest

from wazuh_testing.tools.configuration import get_test_cases_data
from wazuh_testing.tools.file import read_yaml, read_json_file
from wazuh_testing.modules.vulnerability_detector import (T_40, update_feed_path_configurations,
                                                          get_vulnerabilities_for_suse_system)
from wazuh_testing.modules.vulnerability_detector.event_monitor import (check_suse_system_vulnerabilities,
                                                                        check_oval_detect_potential_vulnerabilities)


# Marks
pytestmark = [pytest.mark.server]


# Reference Paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
SUSE_VULNERABILITIES_DATA_PATH = os.path.join(TEST_DATA_PATH, 'vulnerabilities', 'suse_vulnerabilities.json')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_scan_suse_vulnerabilities.yaml')
cases_path = os.path.join(TEST_CASES_PATH, 'cases_scan_suse_vulnerabilities.yaml')

# Test configurations
configurations = read_yaml(configurations_path)
metadata = [item['metadata'] for item in read_yaml(cases_path)]
configuration_parameters, configuration_metadata, case_ids = get_test_cases_data(cases_path)
configurations = update_feed_path_configurations(configurations, metadata, TEST_FEEDS_PATH)
systems = [metadata['system'] for metadata in configuration_metadata]

# Read JSON data template
suse_vulnerabilities = read_json_file(SUSE_VULNERABILITIES_DATA_PATH)


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration', configurations)
@pytest.mark.parametrize('vulnerabilities_json', suse_vulnerabilities)
@pytest.mark.parametrize('metadata, agent_system', zip(configuration_metadata, systems), ids=case_ids)
def test_suse_vulnerabilities_report(configuration, metadata, agent_system, set_wazuh_configuration_vdt,
                                     vulnerabilities_json, truncate_monitored_files, clean_cve_tables_func,
                                     restart_modulesd_function,  prepare_full_scan_with_vuln_packages_for_suse_system):
    '''
    description: Check if inserted vulnerable packages are reported by vulnerability detector. To do this, it checks a
                 report of the corresponding vulnerabilities are generated in the logs file.

    wazuh_min_version: 4.4.0

        test_phases:
        - Set a custom Wazuh configuration.
        - Mock an agent with vulnerable packages.
        - Force a full scan.
        - Restart wazuh-modulesd.
        - Check that the vulnerabilities of each package have been inserted.
        - Check that OVAL reports the expected number of vulnerable packages.

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set wazuh configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - vulnerabilities_json:
            type: dict
            brief: dictionary with system associated vulnerabilities and it's dependencies to be installed.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - restart_modulesd_function:
            type: fixture
            brief: Restart wazuh-modulesd daemon before starting a test, and stop it after finishing.
        - prepare_full_scan_with_vuln_packages_for_suse_system
            type: fixture
            brief: Prepare the environment to launch the vulnerability scan.

    assertions:
        - Verify that the number of OVAL vulnerabilities is the expected.
        - Verify the vulnerabilities of packages inserted.

    input_description:
        - The `configuration_scan_suse_vulnerabilities.yaml` file provides the module configuration for this test.
        - The `cases_scan_suse_vulnerabilities.yaml` file provides the test cases.
        - The `suse_vulnerabilities.json` file provides the vulnerabilities and dependencies that will be installed

    expected_output:
        - r'The .* found a total of .* potential vulnerabilities for agent .*'
        - r'The .* package .* from agent .* is vulnerable to .*'
    '''

    agent_id = prepare_full_scan_with_vuln_packages_for_suse_system
    system_vulnerabilities = get_vulnerabilities_for_suse_system(agent_system, vulnerabilities_json)
    vulnerabilities_number = len(system_vulnerabilities['vulnerabilities'])

    # Check the vulnerabilities of packages inserted
    vulnerabilities_number = check_suse_system_vulnerabilities(system_vulnerabilities, vulnerabilities_number)

    # Check that the number of OVAL vulnerabilities is the expected
    check_oval_detect_potential_vulnerabilities(vulnerabilities_number=vulnerabilities_number,
                                                timeout=T_40, agent_id=agent_id)
