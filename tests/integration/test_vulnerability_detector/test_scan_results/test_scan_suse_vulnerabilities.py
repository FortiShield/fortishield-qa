'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - scan_results
'''
import os
import pytest

from wazuh_testing.tools.configuration import get_test_cases_data
from wazuh_testing.tools.file import read_yaml, read_json_file
from wazuh_testing.modules.vulnerability_detector import T_40, update_feed_path_configurations
from wazuh_testing.modules.vulnerability_detector.event_monitor import check_vulnerability_affects_log, check_oval_report_vulnerabilities
from wazuh_testing.mocking import MOCKED_AGENT_NAME
from wazuh_testing.db_interface.global_db import modify_system
from wazuh_testing.db_interface.cve_db import insert_vulnerability, insert_dependency, insert_pkg_dep
from wazuh_testing.db_interface.agent_db import insert_package
from wazuh_testing.processes import check_if_modulesd_is_running

# Marks
pytestmark = [pytest.mark.server]

# Reference Paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
SUSE_VULNERABILITIES_DATA_PATH = os.path.join(TEST_DATA_PATH, 'vulnerabilities', 'suse_vulnerabilities.json')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')


# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_scan_suse_vulnerabilities.yaml')
cases_path = os.path.join(TEST_CASES_PATH, 'cases_scan_suse_vulnerabilities.yaml')


# Test configurations
configurations = read_yaml(configurations_path)
metadata = [item['metadata'] for item in read_yaml(cases_path)]
configuration_parameters, configuration_metadata, case_ids = get_test_cases_data(cases_path)
configurations = update_feed_path_configurations(configurations, metadata, TEST_FEEDS_PATH)
systems = [metadata['system'] for metadata in configuration_metadata]

# Read JSON data template
suse_vulnerabilities = read_json_file(SUSE_VULNERABILITIES_DATA_PATH)


@pytest.fixture(scope='function')
def mock_suse_vulnerability_scan(clean_cve_tables_func, agent_system, mock_agent_with_custom_system):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """    
    system_vulnerabilities = None
    for vulnerability in suse_vulnerabilities:
        if vulnerability['target'] == agent_system:
            system_vulnerabilities = vulnerability
    print("AGENT ID------------------" + mock_agent_with_custom_system)
    # Mock system
    modify_system(agent_id=mock_agent_with_custom_system, os_name=system_vulnerabilities['os_name'], os_major=system_vulnerabilities['os_major'],
                     os_minor=system_vulnerabilities['os_minor'], name=MOCKED_AGENT_NAME)

    # Add custom vulnerabilities and feeds
    id=1
    for vulnerability in system_vulnerabilities['vulnerabilities']:
        for dependency in vulnerability['dependency']:
            insert_dependency(id=dependency['test_ref'], name=dependency['name'], operation=dependency['operation'],
                                operation_value=dependency['operation_value'], target=system_vulnerabilities['target'], installed=dependency['installed'])

        insert_package(**vulnerability['package'], agent_id=mock_agent_with_custom_system, source=vulnerability['package']['name'])
        insert_vulnerability(**vulnerability['cve'], package=vulnerability['package']['name'],
                                target=system_vulnerabilities['target'], deps_id=id)
        for dep in vulnerability['dependency']:
            insert_pkg_dep(id=dep['test_ref'], target=system_vulnerabilities['target'], package_id=id)
        id+=1

    for agent_dependencies in system_vulnerabilities['agent_dependencies']:
        insert_package(**agent_dependencies['package'], agent_id=mock_agent_with_custom_system, source=agent_dependencies['package']['name'])


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration', configurations)
@pytest.mark.parametrize('metadata, agent_system', zip(configuration_metadata, systems), ids=case_ids)
def test_suse_vulnerabilities_report(configuration, metadata, agent_system, restart_modulesd_function, set_wazuh_configuration_vdt,
                                     truncate_monitored_files, mock_suse_vulnerability_scan):
    '''
    description: Check if inserted vulnerable packages are reported by vulnerability detector. To do this, it checks a
                 report of the corresponding vulnerabilities are generated in the logs file.

    wazuh_min_version: 4.4.0

    parameters:
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: fixture
            brief: Reset the logs file and start a new monitor.
        - check_cve_db:
            type: fixture
            brief: Check if the CVE database exists and its tables are created.
        - mock_vulnerability_scan:
            type: fixture
            brief: It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host
                   system.

    assertions:
        - Verify that the number of OVAL vulnerabilities is the expected.
        - Verify the vulnerabilities of packages inserted.
        - Verify that the modulesd daemon is running.

    input_description:
        - Test cases are found in the test module. The `wazuh_ubuntu_inventory.yaml` file provides the configuration of
          this module for this test. Vulnerabilities are got from ubuntu_vulnerabilities.json file.

    expected_output:
        - r'The .* found a total of .* potential vulnerabilities for agent .*'
        - r'The .* package .* from agent .* is vulnerable to .*'
        - r'(The file|File from URL) .* was successfully uncompressed into .*'
    '''
    for vulnerability in suse_vulnerabilities:
        if vulnerability['target'] == agent_system:
            system_vulnerabilities = vulnerability
    vulnerabilities_number = len(system_vulnerabilities['vulnerabilities'])
    print("VULN NUMBER -----" + str(vulnerabilities_number))

    # Check the vulnerabilities of packages inserted
    for item in system_vulnerabilities['vulnerabilities']:
        vulnerable = False
        for deps in item['dependency']:
            if deps['installed'] == "1":
                vulnerable = True
                break
        if not vulnerable:
            vulnerabilities_number-=1
        else:
            check_vulnerability_affects_log(package=item['package']['name'],
                                            cve=item['cve']['cveid'], agent_id='.*')

    # Check that the number of OVAL vulnerabilities is the expected
    check_oval_report_vulnerabilities(vulnerabilities_number=vulnerabilities_number,
                                             timeout=T_40)

    check_if_modulesd_is_running()

    