# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json
from time import sleep

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file
from wazuh_testing.vulnerability_detector import make_vuln_callback, insert_package, clean_table, \
                                                 insert_vulnerability, modify_system, clean_vd_tables, \
                                                 CUSTOM_NVD_VULNERABILITIES_1, CUSTOM_NVD_FEED
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=1)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_nvd_configuration.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', 'feeds', CUSTOM_NVD_VULNERABILITIES_1)
custom_nvd_json_path = os.path.join(test_data_path, 'feeds', CUSTOM_NVD_FEED)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', 'custom_redhat_oval_feed.xml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
SCAN_TIMEOUT = 40

# Set configuration
parameters = [{ 'NVD_JSON_PATH': custom_nvd_json_path, 'REDHAT_JSON_PATH': custom_redhat_oval_feed_path }]
metadata = [{ 'nvd_json_path': custom_nvd_json_path, 'redhat_json_path': custom_redhat_oval_feed_path }]
ids = ['REDHAT_configuration']

# Read JSON data template
with open(vulnerabilities_data_path, 'r') as f:
    nvd_vulnerabilities = json.loads(f.read())

system_data = [
    { "target": "RHEL8", "os_name": "CentOS Linux", "os_major": "8", "os_minor": "1", "name": "centos8" },
    { "target": "RHEL7", "os_name": "CentOS Linux", "os_major": "7", "os_minor": "8", "name": "centos7" },
    { "target": "RHEL6", "os_name": "CentOS Linux", "os_major": "6", "os_minor": "10", "name": "centos6" },
    { "target": "RHEL5", "os_name": "CentOS Linux", "os_major": "5", "os_minor": "11", "name": "centos5" }
]
system_data_ids = [ system['target'] for system in system_data ]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
def mock_vulnerability_scan(request):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    control_service('stop', daemon='wazuh-db')

    # Wait until modulesd is restarted to avoid overwriting the system
    sleep(5)

    # Clean tables
    clean_vd_tables(agent='000')

    # Mock system
    modify_system(os_name=request.param['os_name'], os_major=request.param['os_major'],
                  os_minor=request.param['os_minor'], name=request.param['name'])

    # Insert custom test package
    insert_package(**nvd_vulnerabilities['vulnerabilities'][0]['package'], format='rpm')

    control_service('start', daemon='wazuh-db')

    # Truncate ossec.log
    truncate_file(LOG_FILE_PATH)

    yield request.param

    control_service('stop', daemon='wazuh-db')

    # Clean tables
    clean_vd_tables(agent='000')

    sleep(1)

    control_service('start', daemon='wazuh-db')


def test_invalid_redhat_feed(get_configuration, configure_environment, restart_modulesd, mock_vulnerability_scan):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector
    """
    package = nvd_vulnerabilities['vulnerabilities'][0]['package']['name']
    cve = nvd_vulnerabilities['vulnerabilities'][0]['cve']['cveid']

    # Check that the number of NVD vulnerabilities is the expected
    wazuh_log_monitor.start(
        timeout=SCAN_TIMEOUT,
        update_position=False,
        callback=make_vuln_callback( f"The OVAL found a total of '1' potential vulnerabilities for agent .*"),
        error_message=f"The expected number of vulnerabilities for NVD have not been found",
    )

    # Check that the package is vulnerable
    wazuh_log_monitor.start(
        timeout=SCAN_TIMEOUT,
        update_position=False,
        callback=make_vuln_callback(f"The '{package}' package .* from agent .* is vulnerable to '{cve}'"),
        error_message=f"Could not find the report which says that the package {package} is vulnerable with {cve}",
    )
