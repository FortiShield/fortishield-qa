# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json
from time import sleep

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file, read_file, write_file
from wazuh_testing.tools.services import control_service
import wazuh_testing.vulnerability_detector as vd

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'configuration', vd.INVALID_RHEL_FEEDS)
vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', vd.CUSTOM_NVD_VULNERABILITIES_1)
custom_nvd_json_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', 'custom_redhat_oval_feed.json')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
SCAN_TIMEOUT = 40

# Set configuration
parameters = [{'NVD_JSON_PATH': custom_nvd_json_path, 'REDHAT_JSON_PATH': custom_redhat_oval_feed_path}]
metadata = [{'nvd_json_path': custom_nvd_json_path, 'redhat_json_path': custom_redhat_oval_feed_path}]
ids = ['REDHAT_configuration']

# Read JSON data template
with open(vulnerabilities_data_path, 'r') as f:
    nvd_vulnerabilities = json.loads(f.read())

system_data = [
    {"target": "RHEL8", "os_name": "CentOS Linux", "os_major": "8", "os_minor": "1", "name": "centos8"}
]

fields = ['CVE', 'severity', 'public_date', 'advisories', 'bugzilla', 'bugzilla_description', 'cvss_score',
          'cvss_scoring_vector', 'CWE', 'affected_packages', 'resource_url', 'cvss3_scoring_vector', 'cvss3_score']

field_ids = [f"field_{field}" for field in fields]

expected_error_messages = [
    r"DEBUG: \(\d+\): Null elements needing value have been found in a node of the feed. The update will not continue.",
    r"DEBUG: \(\d+\): Failed when updating 'redhat provider' database",
    r"ERROR: \(\d+\): CVE database could not be updated."
]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=fields, ids=field_ids)
def remove_field_feed(request):
    """
    It allows to modify the feed by removing a certain field and loading the new feed configuration
    """
    backup_data = json.loads(read_file(custom_redhat_oval_feed_path))[0]

    data_removed_field = dict(backup_data)

    data_removed_field.pop(request.param, None)

    write_file(custom_redhat_oval_feed_path, json.dumps([data_removed_field], indent=4))

    vd.clean_vuln_and_sys_programs_tables()

    vd.insert_custom_package(**nvd_vulnerabilities['vulnerabilities'][0]['package'], format='rpm')

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_custom_system(os_name=system_data[0]['os_name'], os_major=system_data[0]['os_major'],
                         os_minor=system_data[0]['os_minor'], name=system_data[0]['name'])

    yield request.param

    write_file(custom_redhat_oval_feed_path, json.dumps([backup_data], indent=4))

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


def test_invalid_redhat_feed(get_configuration, configure_environment, restart_modulesd, remove_field_feed):
    """
    Check if vulnerability detector behaves as expected when importing redhat OVAL feeds with missing fields
    """
    if remove_field_feed == 'affected_packages':
        pytest.xfail("Add error messages to this case use. Issue: https://github.com/wazuh/wazuh/issues/5151")

    # If the field removed is essential, then look for error messages
    if remove_field_feed in vd.REDHAT_KEY_FIELDS_FEEDS:
        for expected_event_message in expected_error_messages:
            vd.check_vulnerability_event(wazuh_log_monitor=wazuh_log_monitor, callback=expected_event_message,
                                         error_message=f"Could not find the following event: {expected_event_message}",
                                         update_position=False, timeout=30)

        vd.check_vulnerabilities_number(expected_number=0)
    # If the field removed is not essential then check db and alerts
    else:
        package = nvd_vulnerabilities['vulnerabilities'][0]['package']['name']
        cve = nvd_vulnerabilities['vulnerabilities'][0]['cve']['cveid']

        vd.check_vulnerability_event(
            wazuh_log_monitor=wazuh_log_monitor, update_position=False, timeout=SCAN_TIMEOUT,
            callback=f"The OVAL found a total of '1' potential vulnerabilities for agent .*",
            error_message=f"The expected number of OVAL vulnerabilities for NVD have not been found")

        vd.check_vulnerability_event(
            wazuh_log_monitor=wazuh_log_monitor, update_position=False, timeout=SCAN_TIMEOUT,
            callback=f"The '{package}' package .* from agent .* is vulnerable to '{cve}'",
            error_message=f"Could not find the report which says that the package {package} is vulnerable with {cve}")

        vd.check_vulnerabilities_number(expected_number=5)
