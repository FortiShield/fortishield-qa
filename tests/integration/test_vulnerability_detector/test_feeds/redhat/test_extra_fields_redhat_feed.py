# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import wazuh_testing.vulnerability_detector as vd

from wazuh_testing.tools import LOG_FILE_PATH, file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import insert_xml_tag

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_RHEL_FEEDS_CONF)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_redhat_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'REDHAT_JSON_PATH': custom_redhat_json_feed_path,
               'REDHAT_CUSTOM_OVAL_FEED': custom_redhat_oval_feed_path}]
ids = ['REDHAT_configuration']

# Insert extra tags before <generator> tag
insert_pattern = r'(.*)(<generator>)(.*)'
EXTRA_TEST_DATA = [[1, 2, 3], {"a": 1, "b": 2},  " "]
EXTRA_TEST_DATA_VALUES = [[1, 2, 3], {"a": 1, "b": 2}, "extra_tag", 12345, "ñ", "テスト", "ИСПЫТАНИЕ", "测试", "اختبار",
                          " ", ""]
EXTRA_TEST_VALUES = [(tag, value) for tag in EXTRA_TEST_DATA for value in EXTRA_TEST_DATA_VALUES]
EXTRA_TEST_IDS = [f"tag: {value[0]}, value: {value[1]}" for value in EXTRA_TEST_VALUES]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_values, request):
    """
    Modify the redhat OVAL feed, setting a test field value
    """
    backup_data = file.read_xml_file(file_path=custom_redhat_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES,
                                     xml_header=True)

    modified_data = insert_xml_tag(pattern=insert_pattern, tag=test_values[0], value=test_values[1],
                                   data=str(backup_data))

    file.write_file(file_path=custom_redhat_oval_feed_path, data=modified_data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='RHEL8')

    yield

    file.write_file(file_path=custom_redhat_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    file.truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default"""
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor,
                                        log_system_name='Red Hat Enterprise Linux 8',
                                        expected_vulnerabilities_number=vd.REDHAT_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.parametrize('test_values', EXTRA_TEST_VALUES, ids=EXTRA_TEST_IDS)
def test_extra_fields_redhat_feed(clean_vuln_tables, test_values, get_configuration, configure_environment,
                                  modify_feed):
    """
    Check if vulnerability detector behaves as expected when importing Red Hat OVAL feed with extra fields
    """
    vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)

    vd.check_if_modulesd_is_running()
