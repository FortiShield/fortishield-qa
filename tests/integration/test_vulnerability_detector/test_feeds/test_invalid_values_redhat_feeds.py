# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json
from time import sleep
import itertools

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file, read_file, write_file
from wazuh_testing.vulnerability_detector import CUSTOM_NVD_VULNERABILITIES_1, CUSTOM_NVD_FEED, \
                                                 REDHAT_KEY_FIELDS_FEEDS, INVALID_RHEL_FEEDS, REDHAT_LOG, \
                                                 check_vulnerability_event, check_vulnerabilities_number, \
                                                 clean_vuln_and_sys_programs_tables, set_custom_system, \
                                                 check_feed_imported_successfully, check_failure_when_importing_feed
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'configuration', INVALID_RHEL_FEEDS)
vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', CUSTOM_NVD_VULNERABILITIES_1)
custom_nvd_json_path = os.path.join(test_data_path, 'feeds', CUSTOM_NVD_FEED)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', 'custom_redhat_oval_feed.json')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': custom_nvd_json_path, 'REDHAT_JSON_PATH': custom_redhat_oval_feed_path}]
metadata = [{'nvd_json_path': custom_nvd_json_path, 'redhat_json_path': custom_redhat_oval_feed_path}]
ids = ['REDHAT_configuration']

# Read JSON data template
with open(vulnerabilities_data_path, 'r') as f:
    nvd_vulnerabilities = json.loads(f.read())

system_data = {"target": "RHEL8", "os_name": "CentOS Linux", "os_major": "8", "os_minor": "1", "name": "centos8"}

# Custom inputs to check
inputs = [None, "", "dummy value", 12345, ['1', '2', '3', '4', '5'], "ñ", "テスト", "ИСПЫТАНИЕ", "测试", "اختبار"]

# Redhat fields to check
field_data = [
    {"field": "CVE", "type": str},
    {"field": "severity", "input": "", "type": str},
    {"field": "public_date", "type": str},
    {"field": "advisories", "type": list},
    {"field": "bugzilla", "type": str},
    {"field": "bugzilla_description", "type": str},
    {"field": "cvss_score", "type": str},
    {"field": "cvss_scoring_vector", "type": str},
    {"field": "CWE", "type": str},
    {"field": "affected_packages", "type": list},
    {"field": "resource_url", "type": str},
    {"field": "cvss3_scoring_vector", "type": str},
    {"field": "cvss3_score", "type": str}
]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture()
def modify_feed(field_info, custom_input, request):
    """
    Modify the redhat OVAL feeds, setting a test field value
    """
    backup_data = json.loads(read_file(custom_redhat_oval_feed_path))[0]

    modified_data = dict(backup_data)

    modified_data[field_info['field']] = custom_input

    write_file(custom_redhat_oval_feed_path, json.dumps([modified_data], indent=4, ensure_ascii=False))

    clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    set_custom_system(os_name=system_data['os_name'], os_major=system_data['os_major'],
                      os_minor=system_data['os_minor'], name=system_data['name'])

    yield

    write_file(custom_redhat_oval_feed_path, json.dumps([backup_data], indent=4))

    clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


@pytest.mark.parametrize('field_info, custom_input', itertools.product(field_data, inputs))
def test_invalid_redhat_feed(field_info, custom_input, get_configuration, configure_environment, restart_modulesd,
                             modify_feed):
    """
    Check if vulnerability detector behaves as expected when importing redhat OVAL feeds with wrong field values
    """
    if field_info['field'] == 'affected_packages':
        pytest.xfail("Add error messages to this case use. Issue: https://github.com/wazuh/wazuh/issues/5151")

    # If the field is "key" and the input type is not the field type, then look for error messages
    if field_info['field'] in REDHAT_KEY_FIELDS_FEEDS and not type(custom_input) is field_info['type']:
        check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)
    else:
        check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, expected_vulnerabilities_number=5,
                                         log_system_name=REDHAT_LOG)
