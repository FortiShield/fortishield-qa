# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
from copy import deepcopy

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import lower_case_key_dictionary_array

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_ALAS_FEEDS_CONF)
custom_alas_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ALAS_JSON_FEED)
custom_alas2_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ALAS2_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set Amazon Linux 1 and 2 configuration
parameters = [
    {'ALAS_CUSTOM_FEED': custom_alas_json_feed_path, 'OS': 'amazon-linux'},
    {'ALAS_CUSTOM_FEED': custom_alas2_json_feed_path, 'OS': 'amazon-linux-2'}
]
metadata = lower_case_key_dictionary_array(parameters)
ids = [
    'ALAS_configuration',
    'ALAS2_configuration'
]

# Arch Linux fields to check
fields = ['severity', 'publishedDate', 'lastModifiedDate', 'references', 'vulnerabilities', 'fixed_packages']

field_ids = [f"missing: {field}" for field in fields]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=fields, ids=field_ids)
def remove_field_feed(get_configuration, request):
    """It allows to modify the feed by removing a certain field and loading the new feed configuration."""
    alas_feed_path = get_configuration['metadata']['alas_custom_feed']
    if alas_feed_path == custom_alas_json_feed_path:
        custom_feed_path = custom_alas_json_feed_path
    elif alas_feed_path == custom_alas2_json_feed_path:
        custom_feed_path = custom_alas2_json_feed_path

    backup_data = read_json_file(custom_feed_path)
    modified_data = deepcopy(backup_data)

    if custom_feed_path == custom_alas_json_feed_path:
        data_removed_field = dict(modified_data['advisories']['ALAS-2021-1498'])
    elif custom_feed_path == custom_alas2_json_feed_path:
        data_removed_field = dict(modified_data['advisories']['ALAS-2021-1633'])

    data_removed_field.pop(request.param, None)

    if custom_feed_path == custom_alas_json_feed_path:
        modified_data['advisories']['ALAS-2021-1498'] = data_removed_field
    elif custom_feed_path == custom_alas2_json_feed_path:
        modified_data['advisories']['ALAS-2021-1633'] = data_removed_field

    write_json_file(custom_feed_path, modified_data)

    vd.clean_vuln_and_sys_programs_tables()
    control_service('restart', daemon='wazuh-modulesd')
    vd.set_system(system='ALAS')

    yield request.param

    write_json_file(custom_feed_path, backup_data)
    vd.clean_vuln_and_sys_programs_tables()
    truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default"""
    if get_configuration['metadata']['alas_custom_feed'] == custom_alas_json_feed_path:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ALAS_LOG,
                                            expected_vulnerabilities_number=vd.ALAS_NUM_CUSTOM_VULNERABILITIES)
    elif get_configuration['metadata']['alas_custom_feed'] == custom_alas2_json_feed_path:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ALAS2_LOG,
                                            expected_vulnerabilities_number=vd.ALAS2_NUM_CUSTOM_VULNERABILITIES)


def test_invalid_archlinux_feed(clean_vuln_tables, get_configuration, configure_environment, remove_field_feed):
    """Check if the feed is imported successfully."""
    if get_configuration['metadata']['alas_custom_feed'] == custom_alas_json_feed_path:
        if remove_field_feed == 'vulnerabilities':
            expected_alas_vulnerabilities = 0
        elif remove_field_feed == 'fixed_packages':
            expected_alas_vulnerabilities = 24
        else:
            expected_alas_vulnerabilities = vd.ALAS_NUM_CUSTOM_VULNERABILITIES
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ALAS_LOG,
                                            expected_vulnerabilities_number=expected_alas_vulnerabilities)
    elif get_configuration['metadata']['alas_custom_feed'] == custom_alas2_json_feed_path:
        if remove_field_feed == 'vulnerabilities':
            expected_alas2_vulnerabilities = 0
        elif remove_field_feed == 'fixed_packages':
            expected_alas2_vulnerabilities = 8
        else:
            expected_alas2_vulnerabilities = vd.ALAS2_NUM_CUSTOM_VULNERABILITIES
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ALAS2_LOG,
                                            expected_vulnerabilities_number=expected_alas2_vulnerabilities)
