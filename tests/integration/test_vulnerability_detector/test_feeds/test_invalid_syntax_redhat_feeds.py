# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json
from time import sleep

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file, write_file
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import replace_regex_group

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'configuration', vd.INVALID_RHEL_FEEDS)
vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', vd.CUSTOM_NVD_VULNERABILITIES_1)
custom_nvd_json_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': custom_nvd_json_path, 'REDHAT_JSON_PATH': custom_redhat_oval_feed_path}]
metadata = [{'nvd_json_path': custom_nvd_json_path, 'redhat_json_path': custom_redhat_oval_feed_path}]
ids = ['REDHAT_configuration']

# Read JSON data template
nvd_vulnerabilities = read_json_file(vulnerabilities_data_path)

test_data = [
    # CURLY BRACKETS
    {"pattern": r'(\{).*\n.*"CVE"', "update": '', "description": "Delete initial '{'"},
    {"pattern": r'cvss3_score".*\n.*(\})', "update": '', "description": "Delete the final '}'"},
    {"pattern": r'(\{)\n.*', "update": '{{', "description": "Add '{{'"},
    {"pattern": r'"cvss3_score".*\n.*(\})', "update": '}}', "description": "Add '}}'"},
    {"pattern": r'"CVE":.*(,)', "update": ',{', "description": "Add '{' in the middle of feed"},
    {"pattern": r'"CVE":.*(,)', "update": ',}', "description": "Add '}' in the middle of feed"},
    {"pattern": r'"CVE":.*(,)', "update": ',{}', "description": "Add '{}' in the middle of feed"},

    # COMMA
    {"pattern": r'.*"CVE":.*(,)', "update": '', "description": "Delete key:value comma ','"},
    {"pattern": r'.*"CVE"(:)', "update": ': ,', "description": "Add a comma before value key: ,value,"},
    {"pattern": r'\{\n.*("CVE")', "update": ', "CVE"', "description": "Add a comma before any key value ', key:value'"},
    {"pattern": r'"cvss3_score":.*\n.*(\})', "update": ',}', "description": "Add a comma at the end ',}'"},
    {"pattern": r'.*"CVE":.*(,)', "update": ',,', "description": "Add double comma after key:value,,"},
    {"pattern": r'".*package-0-0:1.0.el5_0.2"(,)', "update": ',,', "description": "Add double comma after list value,,"},

    # QUOTES
    {"pattern": r'"CVE"(:)', "update": '":', "description": "Close a key with double quotation marks"},
    {"pattern": r'"CVE":.*(,)', "update": '",', "description": "Close a value with double quotation marks"},

    #SEMICOLON
    {"pattern": r'"CVE":.*(,)', "update": ';', "description": "Replace a comma with semicolon"},
    {"pattern": r'"CVE"(:)', "update": ';', "description": "Replace a colon with semicolon"},

    # BRACKETS
    {"pattern": r'"affected_packages":.*(\[)', "update": '', "description": "Missing open bracket"},
    {"pattern": r'el8_1.2"\n.*(\])', "update": '', "description": "Missing close bracket"},

    # MISSING INFO
    {"pattern": r'.*bug(.*)', "update": '', "description": "Delete some information"},
]

# Add EXTRA CHARS to test_data
extra_chars = ['.', ':', '@', '#', '*', '-', '_', "'",'"', '/', '=', '<', '>', '!', '?', '%', '&', '`']
for item in extra_chars:
  test_data.append({"pattern": r'"CVE":.*(,)', "update": item, "description": f"Replace ',' with '{item}'"})

test_ids = [item['description'] for item in test_data]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_data, request):
    """
    Modify the redhat OVAL feeds, setting a test field value
    """
    backup_data = read_json_file(custom_redhat_oval_feed_path)[0]

    modified_data = dict(backup_data)

    modified_string_data = replace_regex_group(test_data['pattern'], test_data['update'], str(modified_data))

    write_file(custom_redhat_oval_feed_path, modified_string_data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='RHEL8')

    yield

    control_service('restart', daemon='wazuh-modulesd')

    write_json_file(custom_redhat_oval_feed_path, [backup_data])

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


@pytest.mark.parametrize('test_data', test_data)
def test_extra_fields_redhat_feed(test_data, get_configuration, configure_environment, modify_feed):
    """
    Check if vulnerability detector behaves as expected when importing redhat OVAL feeds with syntax errors
    """
    vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor, parser_error=True)

    vd.check_vulnerabilities_number(expected_number=0)
