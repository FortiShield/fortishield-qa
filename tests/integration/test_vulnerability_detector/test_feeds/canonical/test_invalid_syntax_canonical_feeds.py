# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import file
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import replace_regex_group

# Marks
pytestmark = pytest.mark.tier(level=2)

current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', vd.INVALID_CANONICAL_FEEDS_CONF)
custom_canonical_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_CANONICAL_OVAL_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'CANONICAL_CUSTOM_FEED': custom_canonical_oval_feed_path}]
metadata = [{'canonical_custom_feed': custom_canonical_oval_feed_path}]
ids = ['CANONICAL_configuration']

system_data = vd.SYSTEM_DATA['BIONIC']

test_data = [
    {"regex": r'(.*)(<generator>)(.*)', "update": 'generator>', "description": "Delete '<'", "expected_fail": True},
    {"regex": r'(.*)(<generator>)(.*)', "update": '<generator', "description": "Delete '>'", "expected_fail": True},
    {"regex": r'(.*)(<generator>)(.*)', "update": 'generator', "description": "Delete '<>'", "expected_fail": True},
    {"regex": r'(.*)(<generator>)(.*)', "update": '</generator>', "description": "Close initial tag",
     "expected_fail": True},
    {"regex": r'(.*)(<definitions>)(.*)', "update": '', "description": "Delete opening tag", "expected_fail": True},
    {"regex": r'(.*)(</definitions>)(.*)', "update": '', "description": "Delete closing tag", "expected_fail": True},
    {"regex": r'(.*)(<definitions>)(.*)', "update": '<><definitions>', "description": "Empty opening tag",
     "expected_fail": True},
    {"regex": r'(.*)(<definitions>)(.*)', "update": '</><definitions>', "description": "Empty closing tag",
     "expected_fail": True},
    {"regex": r'(.*)(<definitions>)(.*)', "update": 'as.-*!`ñ<definitions>', "description": "Random text before tag",
     "expected_fail": False},
    {"regex": r'(<oval_definitions.*)(xmlns:oval.*)(<generator>.*)', "update": '', "description": "Delete info",
     "expected_fail": True},
]

# Add EXTRA CHARS to test_data
extra_chars = ['.', ':', '@', '#', '*', '-', '_', "'", '"', '/', '=', 'ñ', 'ç', '+', '^', '!', '?', '%', '&', '`', '¿',
               '?', '(', ')', '|', 'º', '$', '½', '¬', '!', '~', '¡', '[', ']', '{', '}']

for item in extra_chars:
    test_data.append({"regex": r'(.*)(<metadata>)(.*)', "update": f"{item}<metadata>",
                      "description": f"Add {item} character before <metadata>", "expected_fail": False})

for item in extra_chars:
    test_data.append({"regex": r'(.*)(<)(metadata>.*)', "update": item,
                      "description": f"Replace '<' with '{item}' in <metadata>", "expected_fail": True})

test_ids = [item['description'] for item in test_data]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_data, request):
    """
    Modify the Canonical OVAL feeds, setting a test field value
    """
    backup_data = file.read_xml_file(file_path=custom_canonical_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES)

    modified_data = str(backup_data)

    modified_data = replace_regex_group(test_data['regex'], test_data['update'], modified_data)

    file.write_file(file_path=custom_canonical_oval_feed_path, data=modified_data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='BIONIC')

    yield

    file.write_file(file_path=custom_canonical_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


@pytest.mark.parametrize('test_data', test_data, ids=test_ids)
def test_invalid_syntax_canonical_feed(test_data, get_configuration, configure_environment, restart_modulesd,
                                       modify_feed):
    """
    Check if vulnerability detector behaves as expected when importing Canonical OVAL feeds with syntax errors
    """
    if test_data['expected_fail']:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)
    else:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.BIONIC_LOG,
                                            expected_vulnerabilities_number=vd.CANONICAL_NUM_CUSTOM_VULNERABILITIES)
    vd.check_if_modulesd_is_running()
