
# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools import file
from wazuh_testing.tools.utils import insert_xml_tag
from wazuh_testing.tools.file import truncate_file
from wazuh_testing.tools.services import control_service
import wazuh_testing.vulnerability_detector as vd

# Marks
pytestmark = pytest.mark.tier(level=2)

current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', vd.INVALID_CANONICAL_FEEDS_CONF)
custom_canonical_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_CANONICAL_OVAL_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'CANONICAL_CUSTOM_FEED': custom_canonical_oval_feed_path}]
metadata = [{'canonical_custom_feed': custom_canonical_oval_feed_path}]
ids = ['CANONICAL_configuration']

system_data = vd.SYSTEM_DATA['BIONIC']

test_data = [[1, 2, 3], {"a": 1, "b": 2}, "extra_field", 12345, "ñ", "テスト", "ИСПЫТАНИЕ", "测试", "اختبار", " ", ""]
test_values = [(field, value) for field in test_data for value in test_data]

field_ids = [f"field_{value[0]}_value_{value[1]}" for value in test_values]

# Insert extra fields before <generator> tag
insert_pattern = r'(.*)(<generator>)(.*)'

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_values, request):
    """
    Modify the Canonical OVAL feed, setting a test field value
    """
    backup_data = file.read_xml_file(file_path=custom_canonical_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES)

    modified_data = insert_xml_tag(pattern=insert_pattern, tag=test_values[0], value=test_values[1],
                                   data=str(backup_data))

    file.write_file(file_path=custom_canonical_oval_feed_path, data=modified_data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='BIONIC')

    yield

    file.write_file(file_path=custom_canonical_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


@pytest.mark.parametrize('test_values', test_values, ids=field_ids)
def test_extra_fields_canonical_feed(test_values, get_configuration, configure_environment, modify_feed):
    """
    Check if vulnerability detector behaves as expected when importing Canonical OVAL feeds with extra fields
    """
    inserted_tag = test_values[0]
    if inserted_tag != ' ' and type(inserted_tag) is str or type(inserted_tag) is int:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.BIONIC_LOG,
                                            expected_vulnerabilities_number=vd.CANONICAL_NUM_CUSTOM_VULNERABILITIES)
    else:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)

    vd.check_if_modulesd_is_running()
