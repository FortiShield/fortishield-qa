# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import read_json_file, write_file, truncate_file
from wazuh_testing.tools.utils import replace_regex
from wazuh_testing.tools import file
from wazuh_testing.tools.services import control_service
import wazuh_testing.vulnerability_detector as vd


# Marks
pytestmark = pytest.mark.tier(level=2)

current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', vd.INVALID_CANONICAL_FEEDS_CONF)
custom_canonical_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_CANONICAL_OVAL_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'CANONICAL_CUSTOM_FEED': custom_canonical_oval_feed_path}]
metadata = [{'canonical_custom_feed': custom_canonical_oval_feed_path}]
ids = ['CANONICAL_configuration']

system_data = vd.SYSTEM_DATA['BIONIC']

fields = [
    # Generator element
    {'name': 'generator', 'regex': r'<generator>.*<\/generator>'},
    # Generator child elements
    {'name': 'product_name', 'regex': r'<oval:product_name>.*<\/oval:product_name>'},
    {'name': 'product_version', 'regex': r'<oval:product_version>.*<\/oval:product_version>'},
    {'name': 'schema_version', 'regex': r'<oval:schema_version>.*<\/oval:schema_version>'},
    {'name': 'schema_version', 'regex': r'<oval:timestamp>2020-05-28T14:13:36</oval:timestamp>'},
    # Definitions element
    {'name': 'definitions', 'regex': r'<definitions>.*<\/definitions>'},
    # Definitions child elements
    {'name': 'definition', 'regex': r'<definition\s.*>.*<\/definition>'},
    # Definition child elements
    {'name': 'metadata', 'regex': r'<metadata.*>.*<\/metadata>'},
    # Metadata child elements
    {'name': 'title', 'regex': r'<title.*>.*<\/title>'},
    {'name': 'description', 'regex': r'<description.*>.*<\/description>'},
    {'name': 'affected', 'regex': r'<affected.*>.*<\/affected>'},
    # Affected child elements
    {'name': 'platform', 'regex': r'<platform.*>.*<\/platform>'},
    # Reference element
    {'name': 'reference', 'regex': r'<reference.*name=CVE-000"\s*\/>'},
    {'name': 'advisory', 'regex': r'<advisory>.*<\/advisory>'},
    # Advisory elements
    {'name': 'severity', 'regex': r'<severity>.*<\/severity>'},
    {'name': 'public_date', 'regex': r'<public_date>.*<\/public_date>'},
    {'name': 'bug', 'regex': r'<ref>.*<\/ref>'},
    # Criteria element
    {'name': 'criteria', 'regex': r'<criteria>.*<\/criteria>'},
    {'name': 'extend_definition', 'regex': r'<extend_definition.*applicability_check="true"\s*\/>'},
    {'name': 'criterion', 'regex': r'<criterion.*vulnerable"\s*\/>'},
    # Tests element
    {'name': 'tests', 'regex': r'<tests>.*<\/tests>'},
    # Tests child elements
    {'name': 'dpkginfo_test', 'regex': r'<linux-def:dpkginfo_test.*<\/linux-def:dpkginfo_test>'},
    {'name': 'test_object', 'regex': r'<linux-def:object object_ref="oval:com.ubuntu.bionic:obj:1"\s*\/>'},
    # Objects element
    {'name': 'objects', 'regex': r'<objects>.*<\/objects>'},
    {'name': 'dpkginfo_object', 'regex': r'<linux-def:dpkginfo_object.*">.*<\/linux-def:dpkginfo_object>'},
    {'name': 'object_element', 'regex': r'<linux-def:name.*var_check="at least one"\s*\/>'},
    # States element
    {'name': 'states', 'regex': r'<states>.*<\/states>'},
    {'name': 'dpkginfo_state', 'regex': r'<linux-def:dpkginfo_state.*>.*<\/linux-def:dpkginfo_state>'},
    {'name': 'state_object', 'regex': r'<linux-def:evr.*>.*<\/linux-def:evr>'},
    # Variables element
    {'name': 'variables', 'regex': r'<variables>.*<\/variables>'},
    {'name': 'constant_variable', 'regex': r'<constant_variable.*>.*<\/constant_variable>'},
    {'name': 'variable_value', 'regex': r'<constant_variable.*(<value>.*<\/value>).*<\/constant_variable>'}
]

key_fields = ['definitions', 'definition', 'metadata', 'criteria', 'criterion', 'tests', 'dpkginfo_test', 'test_object',
              'dpkginfo_object', 'object_element', 'dpkginfo_state', 'state_object', 'constant_variable',
              'variable_value']

xfail_fields = ['definitions', 'metadata', 'reference', 'criteria', 'tests']


field_ids = [f"missing_{field['name']}_field" for field in fields]


# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=fields, ids=field_ids)
def remove_field_feed(request):
    """
    It allows to modify the feed by removing a certain field and loading the new feed configuration
    """
    backup_data = file.read_xml_file(file_path=custom_canonical_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES)

    data_removed_field = str(backup_data)

    data_removed_field = replace_regex(request.param['regex'], '', data_removed_field)

    file.write_file(file_path=custom_canonical_oval_feed_path, data=data_removed_field)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='BIONIC')

    yield request.param

    file.write_file(file_path=custom_canonical_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


def test_missing_canonical_feed(get_configuration, configure_environment, restart_modulesd, remove_field_feed):
    """Test to check vulnerability detector behavior when importing canonical feeds with missing fields"""
    if remove_field_feed['name'] in xfail_fields:
        pytest.xfail("Add error messages to this case use")

    if remove_field_feed['name'] in key_fields:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor, expected_vulnerabilities_number=0)
    else:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.BIONIC_LOG,
                                            expected_vulnerabilities_number=vd.CANONICAL_NUM_CUSTOM_VULNERABILITIES)
