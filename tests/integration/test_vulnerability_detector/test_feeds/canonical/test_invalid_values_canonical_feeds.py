
# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import itertools

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file
from wazuh_testing.tools import file
from wazuh_testing.tools.utils import replace_regex_group
from wazuh_testing.tools.services import control_service
import wazuh_testing.vulnerability_detector as vd

# Marks
pytestmark = pytest.mark.tier(level=2)

current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', vd.INVALID_CANONICAL_FEEDS_CONF)
custom_canonical_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_CANONICAL_OVAL_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'CANONICAL_CUSTOM_FEED': custom_canonical_oval_feed_path}]
metadata = [{'canonical_custom_feed': custom_canonical_oval_feed_path}]
ids = ['CANONICAL_configuration']

system_data = vd.SYSTEM_DATA['BIONIC']

all_fields = [
    # Generator element
    {'name': 'generator', 'regex': r'(<generator>)(.*)(<\/generator>)'},
    # Generator child elements
    {'name': 'product_name', 'regex': r'(<oval:product_name>)(.*)(<\/oval:product_name>)'},
    {'name': 'product_version', 'regex': r'(<oval:product_version>)(.*)(<\/oval:product_version>)'},
    {'name': 'schema_version', 'regex': r'(<oval:schema_version>)(.*)(<\/oval:schema_version>)'},
    {'name': 'schema_version', 'regex': r'(<oval:timestamp>)(2020-05-28T14:13:36)(</oval:timestamp>)'},
    # Definitions element
    {'name': 'definitions', 'regex': r'(<definitions>)(.*)(<\/definitions>)'},
    # Definitions child elements
    {'name': 'definition', 'regex': r'(<definition.*version="1">)(.*)(<\/definition>)'},
    # Definition child elements
    {'name': 'metadata', 'regex': r'(<metadata>)(.*)(<\/metadata>)'},
    # Metadata child elements
    {'name': 'title', 'regex': r'(<title.*>)(.*)(<\/title>)'},
    {'name': 'description', 'regex': r'(<description.*>)(.*)(<\/description>)'},
    {'name': 'affected', 'regex': r'(<affected.*family="unix">)(.*)(<\/affected>)'},
    # Affected child elements
    {'name': 'platform', 'regex': r'(<platform.*>)(.*)(<\/platform>)'},
    # Reference element
    {'name': 'reference', 'regex': r'(<reference.*ref_id=")(.*)("\s.*name=CVE-000"\s*\/>)'},
    {'name': 'advisory', 'regex': r'(<advisory>)(.*)(<\/advisory>)'},
    # Advisory elements
    {'name': 'severity', 'regex': r'(<severity>)(.*)(<\/severity>)'},
    {'name': 'public_date', 'regex': r'(<public_date>)(.*)(<\/public_date>)'},
    {'name': 'bug', 'regex': r'(<ref>)(.*)(<\/ref>)'},
    # Criteria element
    {'name': 'criteria', 'regex': r'(<criteria>)(.*)(<\/criteria>)'},
    {'name': 'extend_definition', 'regex': r'(<extend_definition .*_ref=")(.*100)(".*"true"\s*\/>)'},
    {'name': 'criterion', 'regex': r'<(criterion test_ref=")(.*:1)(".*vulnerable"\s*\/>)'},
    # Tests element
    {'name': 'tests', 'regex': r'(<tests>)(.*)(<\/tests>)'},
    # Tests child elements
    {'name': 'dpkginfo_test', 'regex': r'(<linux-def:dpkginfo_test\s*id=")(.*tst:1)(".*<\/linux-def:dpkginfo_test>)'},
    {'name': 'test_object', 'regex': r'(<linux-def:object object_ref=")(.*obj:1)("\s*\/>)'},
    # Objects element
    {'name': 'objects', 'regex': r'(<objects>)(.*)(<\/objects>)'},
    {'name': 'dpkginfo_object', 'regex': r'(<linux-def:dpkginfo_ob.*id=")(.*obj:1)(".*>.*<\/.*pkginfo_object>)'},
    {'name': 'object_element', 'regex': r'(<linux-def:name\s*var_ref=")(.*var:1)(".*\/>)'},
    # States element
    {'name': 'states', 'regex': r'(<states>)(.*)(<\/states>)'},
    {'name': 'dpkginfo_state', 'regex': r'(<linux-def:dpkginfo_state id=")(.*:1)(".*>.*<\/linux-def:dpkginfo_state>)'},
    {'name': 'state_object', 'regex': r'(<linux-def:evr.*>)(.*)(<\/linux-def:evr>)'},
    # Variables element
    {'name': 'variables', 'regex': r'(<variables>)(.*)(<\/variables>)'},
    {'name': 'constant_variable', 'regex': r'(<constant_variable id=")(.*:1)(".*<\/constant_variable>)'},
    {'name': 'variable_value', 'regex': r'(<constant_variable.*<value>)(.*)(<\/value>.*<\/constant_variable>)'}
]

# Necessary fields to import successfully the vulnerabilities
key_fields = ['definitions', 'definition', 'metadata', 'criteria', 'criterion', 'tests', 'dpkginfo_test', 'test_object',
              'dpkginfo_object', 'object_element', 'dpkginfo_state', 'state_object', 'constant_variable',
              'variable_value']

# Fields where entering a wrong value does not import vulnerabilities
fail_basic_fields = ['definitions', 'definition', 'metadata', 'criteria', 'criterion', 'tests', 'dpkginfo_test']

# Add key fields indexes
basic_fields_indexes = [all_fields.index(field) for field in all_fields if field['name'] in key_fields]

# Add some non key indexes
basic_fields_indexes.extend([all_fields.index(field) for extra_field in ['product_name', 'affected', 'platform']
                            for field in all_fields if field['name'] == extra_field])

# Sub-list for testing a minimum of fields
basic_fields = [all_fields[index] for index in basic_fields_indexes]

# Custom inputs to check
inputs = [None, "", "dummy value", 12345, ['1', '2', '3', '4', '5'], "ñ", "テスト", "ИСПЫТАНИЕ", "测试", "اختبار"]

basic_field_ids = [f"field_{field['name']}_value_{value}" for field in basic_fields for value in inputs]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(field_info, custom_input, request):
    """
    Modify the Canonical OVAL feeds, setting a test field value
    """
    backup_data = file.read_xml_file(file_path=custom_canonical_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES)

    modified_data = str(backup_data)

    modified_data = replace_regex_group(field_info['regex'], custom_input, modified_data)

    file.write_file(file_path=custom_canonical_oval_feed_path, data=modified_data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='BIONIC')

    yield

    file.write_file(file_path=custom_canonical_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


@pytest.mark.parametrize('field_info, custom_input', itertools.product(basic_fields, inputs), ids=basic_field_ids)
def test_invalid_values_canonical_feed(field_info, custom_input, get_configuration, configure_environment,
                                       restart_modulesd, modify_feed):
    """
    Check if vulnerability detector behaves as expected when importing Canonical OVAL feeds with wrong field values
    """
    if field_info['name'] == 'dpkginfo_test':
        pytest.xfail('Xfailing due to issue: https://github.com/wazuh/wazuh/issues/5275')

    if field_info['name'] in fail_basic_fields:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor, expected_vulnerabilities_number=0)
    else:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.BIONIC_LOG,
                                            expected_vulnerabilities_number=vd.CANONICAL_NUM_CUSTOM_VULNERABILITIES)
