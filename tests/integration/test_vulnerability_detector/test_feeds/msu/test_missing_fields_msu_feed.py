'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Set of tests to check the behavior of Vulnerability Detector when a tag is missing in the feed.

tier: 2

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/offline-update.html#msu

tags:
    - vulnerability
    - vulnerability_detector
'''
import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_MSU_FEEDS_CONF)
custom_msu_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_MSU_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'MSU_JSON_PATH': custom_msu_json_feed_path + "$"}]
ids = ['MSU_configuration']

# MSU fields to check
fields = ['patch', 'product', 'restart_required', 'subtype', 'title', 'url']

field_ids = [f"missing: {field}" for field in fields]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=fields, ids=field_ids)
def remove_field_feed(request):
    """It allows to modify the feed by removing a certain field and loading the new feed configuration."""
    backup_data = read_json_file(custom_msu_json_feed_path)

    data = read_json_file(custom_msu_json_feed_path)

    data_removed_field = dict(data['vulnerabilities']['CVE-010'][0])

    data_removed_field.pop(request.param, None)

    data['vulnerabilities']['CVE-010'][0] = data_removed_field

    write_json_file(custom_msu_json_feed_path, data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='Windows10')

    yield request.param

    write_json_file(custom_msu_json_feed_path, backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    '''
    description: Check if the feed is imported successfully by default. To do this, a vulnerability event is expected
                 and check if the number of vulnerabilities inserted in the VULNERABILITIES table of CVE DB is the
                 expected.

    wazuh_min_version: 4.2.0

    parameters:
        - clean_vuln_tables:
            type: fixture
            brief: Clean vulnerabilities tables.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: callable
            brief: Restart the `wazuh-modulesd` daemon.

    assertions:
        - Assert that the number of vulnerabilities is equal to the expected number of vulnerabilities inserted in the
          VULNERABILITIES table of CVE DB.

    input_description:
        - Test cases are defined in the custom_msu.json file. This file contains different kinds of vulnerability.

    expected_output:
        - 'Number of inserted vulnerabilities is not the expected.'
        - r'Expected, .*, Got: .*'

    tags:
        - vulnerability
        - vulnerability_detector
    '''
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.MSU_LOG,
                                        expected_vulnerabilities_number=0)


def test_invalid_msu_feed(clean_vuln_tables, get_configuration, configure_environment, remove_field_feed):
    '''
    description: Test to check vulnerability detector behavior when importing MSU feed with missing tags. To do
                 this, a tag is removed from the feed and check if the vulnerability can be inserted into the database.

    wazuh_min_version: 4.2.0

    parameters:
        - clean_vuln_tables:
            type: fixture
            brief: Clean vulnerabilities tables.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - remove_tag_feed:
            type: fixture
            brief: Modify the feed by removing a certain field and loading the new configuration.

    assertions:
        - Assert that the number of vulnerabilities is equal to the expected number of vulnerabilities inserted in the
          VULNERABILITIES table of CVE DB and if the process is running.

    input_description:
        - Test cases are defined in the custom_alas_feed.json and custom_alas2_feed.json files. Those files contain two
          different kinds of vulnerability. 'fields' is the list of tags to be checked and 'field_ids' is the
          dictionary's list that indicates the missing tag.

    expected_output:
        - 'Number of inserted vulnerabilities is not the expected.'
        - r'ERROR: The .* feed couldn't be parsed from .* file'
        - r'ERROR: CVE database could not be updated.'
        - r'Could not find the log event: .*'

    tags:
        - vulnerability
        - vulnerability_detector
    '''
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.MSU_LOG,
                                        expected_vulnerabilities_number=0)

    vd.check_if_modulesd_is_running()
