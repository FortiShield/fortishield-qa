import os
import pytest

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vuln_detector import callback_detect_vulnerability_start_scan, \
    callback_detect_vulnerability_end_scan


# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_run_on_start.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

p = [{'RUN_ON_START': 'yes'}, {'RUN_ON_START': 'no'}]
m = [{'run_on_start': 'yes'}, {'run_on_start': 'no'}]

# Lista de configuraciones para cada uno de los p
configurations = load_wazuh_configurations(
    configurations_path, __name__, params=p, metadata=m)

# fixtures


@pytest.fixture(scope='module', params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.mark.parametrize('tags_to_apply, _callback', [
    ({'run_on_start'}, callback_detect_vulnerability_start_scan),
    ({'run_on_start'}, callback_detect_vulnerability_end_scan),
])
def test_run_on_start(tags_to_apply, _callback, get_configuration, configure_environment, restart_modulesd):

    check_apply_test(tags_to_apply, get_configuration['tags'])

    if get_configuration['metadata']['run_on_start'] == 'yes':

        wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
                                         callback=_callback,
                                         error_message='Could not find start scan log')
    else:
        with pytest.raises(TimeoutError):
            event = wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
                                            callback=_callback)
            raise AttributeError(f'Unexpected event {event}')
