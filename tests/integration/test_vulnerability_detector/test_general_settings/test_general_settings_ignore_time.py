# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
from datetime import datetime, timedelta
from time import sleep

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.fim import check_time_travel
from wazuh_testing.tools.time import time_to_seconds
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.vulnerability_detector import  delete_vulnerability, update_last_scan, modify_system
from wazuh_testing.vulnerability_detector import DEFAULT_PACKAGE_NAME, DEFAULT_VULNERABILITY_ID, PACKAGES_DB_PATH
from wazuh_testing.vulnerability_detector import insert_vulnerability, insert_package, clean_table, make_vuln_callback


# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_ignore_time.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

callback_string = f"{DEFAULT_PACKAGE_NAME}.+is vulnerable to {DEFAULT_VULNERABILITY_ID}"

parameters = [{'IGNORE_TIME': '3600s', 'INTERVAL': '5s'}, {'IGNORE_TIME': '60m', 'INTERVAL': '5s'}, 
    {'IGNORE_TIME': '1h', 'INTERVAL': '5s'}]
metadata= [{'ignore_time': '3600s', 'timeout': 60, 'interval': '5s'}, 
    {'ignore_time': '60m', 'timeout': 60, 'interval': '5s'}, 
    {'ignore_time': '1h', 'timeout': 60, 'interval': '5s'}]

# Configuration data
configurations = load_wazuh_configurations(
    configurations_path, __name__, params=parameters, metadata=metadata)

# fixtures

@pytest.fixture(scope='module', params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


#functions

def generate_default_alert():
    control_service('stop', daemon='wazuh-db')
    sleep(10)
    clean_table(os.path.join(PACKAGES_DB_PATH,f"000.db"), 'sys_programs')
    delete_vulnerability(DEFAULT_VULNERABILITY_ID)
    insert_package()
    insert_vulnerability()
    modify_system()
    control_service('start', daemon='wazuh-db')


def reset_last_scan():
    control_service('stop', daemon='wazuh-db')
    update_last_scan()
    control_service('start', daemon='wazuh-db')


# Tests

@pytest.mark.parametrize('tags_to_apply, custom_callback', [
    ({'test_ignore_time'}, make_vuln_callback(callback_string))
])
def test_ignore_time(tags_to_apply, custom_callback, get_configuration, configure_environment, restart_modulesd):
    """
    Check if an alert is not fired during the ingnore time  interval
    """
    reset_last_scan()
    generate_default_alert()
    ignore_time = get_configuration['metadata']['ignore_time']
    seconds_to_travel = time_to_seconds(ignore_time)/2

    wazuh_log_monitor.start(timeout=get_configuration['metadata']['timeout'],
                        callback=custom_callback,
                        error_message='Alert did not appear at the start of the test')

    check_time_travel(time_travel=True, interval=timedelta(seconds=seconds_to_travel))

    with pytest.raises(TimeoutError):
        wazuh_log_monitor.start(timeout=get_configuration['metadata']['timeout'],
                                callback=custom_callback)
        raise AttributeError('Alert appeared before ignore_time was finished')

    check_time_travel(time_travel=True, interval=timedelta(seconds=seconds_to_travel))

    wazuh_log_monitor.start(timeout=get_configuration['metadata']['timeout'],
                    callback=custom_callback,
                    error_message='Alert did not appear at the end of the test')