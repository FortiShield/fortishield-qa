import os
import pytest

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import callback_detect_vulnerability_scan_sleeping
from wazuh_testing.tools.time import time_to_human_readable, unit_to_seconds


# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_interval.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

p = [{'INTERVAL': '5s'}, {'INTERVAL': '5m'}, {'INTERVAL': '5h'}, {'INTERVAL': '5d'}]
m = [{'interval': '5s'}, {'interval': '5m'}, {'interval': '5h'}, {'interval': '5d'}]

# Configuration data
configurations = load_wazuh_configurations(
    configurations_path, __name__, params=p, metadata=m)

# fixtures

@pytest.fixture(scope='module', params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param

# Tests

@pytest.mark.parametrize('tags_to_apply, custom_callback, custom_error_message ', [
    ({'interval'}, callback_detect_vulnerability_scan_sleeping, 'Missing sleep between scans'),
])
def test_interval(tags_to_apply, custom_callback, custom_error_message, get_configuration,
                      configure_environment, restart_modulesd):

    """
    Check if modulesd waits `interval` between one vulnerability detector scan and another.

    Parameters
    ----------
    custom_callback : function
        Callback that will be applied to the value of tags to apply.
    custom_error_message : str
        Custom error message that will be shown if the test fails.
    """

    check_apply_test(tags_to_apply, get_configuration['tags'])

    sleeping_interval = wazuh_log_monitor.start(timeout=global_parameters.default_timeout+50,
                                                callback=custom_callback,
                                                  error_message=custom_error_message).result()
    print(sleeping_interval)

    expected_sleep = time_to_human_readable(unit_to_seconds(get_configuration['metadata']['interval']))

    assert sleeping_interval == expected_sleep