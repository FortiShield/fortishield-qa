'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: These tests will check if the `min_full_scan_interval` option of the Vulnerability Detector module
       is working correctly. This option is located in its corresponding section of the `ossec.conf` file
       and allows to define the minimum time before performing a full scan even if the feed was updated.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#min_full_scan_interval
    - https://github.com/wazuh/wazuh/issues/7749

tags:
    - settings
'''
import os
import pytest

import wazuh_testing.vulnerability_detector as vd
import wazuh_testing.db_interface.agent_db as adb
from wazuh_testing import logger, WAZUH_PATH, DB_PATH
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.time import time_to_seconds
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules.vulnerability_detector.utils import clean_vd_tables
from wazuh_testing.db_interface.cve_db import get_sqlite_query_result, CVE_DB_PATH


# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
test_feed_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
configurations_path = os.path.join(test_data_path, 'wazuh_min_full_scan_interval.yaml')
wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
min_full_scan_interval_values = [60]
min_full_scan_interval_units = ['s']
parameters = []
metadata = []
ids = []
vuln = {
        "target": "RHEL8",
        "package": {
            "name": "sqlite-0",
            "version": "3.25.0",
            "architecture": "x86_64",
            "format": "rpm",
            "vendor": "Red Hat, Inc."
            },
        "cve": {
            "cveid": "CVE-2019-117624",
            "operation": "less than",
            "operation_value": "68.2.0-2.el8_0"
            }
    }

test_package_vendor = 'WazuhIntegrationTests'
test_package_version = '1.0.0'
test_package_version_not_vulnerable = '2.1.0'
test_package_0_name = 'wazuhintegrationpackage-0'
test_package_0_cve = 'CVE-000'
test_package_1_name = 'wazuhintegrationpackage-1'
test_package_1_cve = 'CVE-001'

# Offline feeds
rhel_oval_feed_path = os.path.join(test_feed_path, vd.CUSTOM_REDHAT_OVAL_FEED)
rhel_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_REDHAT_JSON_FEED)
nvd_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_NVD_FEED)

for value in min_full_scan_interval_values:
    for unit in min_full_scan_interval_units:
        parameters.append({'MIN_FULL_SCAN_INTERVAL': f'{value}{unit}',
                           'RHEL_FEED_PATH': rhel_oval_feed_path,
                           'RHEL_JSON_FEED_PATH': rhel_json_feed_path,
                           'NVD_JSON_FEED_PATH': nvd_json_feed_path})
        metadata.append({'min_full_scan_interval': f'{value}{unit}'})
        ids.append(f'{value}{unit}')

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def prepare_cves():
    """Setup the initial databases state.

    It cleans them in the teardown.
    """
    adb.insert_os_info()
    logger.debug(f"Inserting packages")
    adb.insert_package(name=test_package_0_name, vendor=test_package_vendor,
                       version=test_package_version, source='NULL')
    adb.insert_package(name=test_package_1_name, vendor=test_package_vendor,
                       version=test_package_version_not_vulnerable, source='NULL')
    adb.insert_package(name=vuln['package']['name'], version=vuln['package']['version'],
                       format=vuln['package']['format'], architecture=vuln['package']['architecture'],
                       vendor=vuln['package']['vendor'])

    adb.update_sync_info()
    adb.update_last_full_scan(0)

    # logger.debug(f"Inserting vulnerability")
    # insert_vulnerability(cveid=vuln['cve']['cveid'], package=vuln['package']['name'], target=vuln['target'])

    yield

    logger.debug(f"Removing packages")
    adb.delete_package(test_package_0_name)
    adb.delete_package(test_package_1_name)
    # adb.delete_package(vuln['package']['name'])
    # logger.debug(f"Removing vulnerability")
    # delete_vulnerability(vuln['cve']['cveid'])

    # the full scan is triggered all time, is that normal?
    # restore db?
    clean_vd_tables()


@pytest.mark.tier(level=0)
def test_min_full_scan_interval(get_configuration, configure_environment, restart_modulesd, prepare_cves):
    '''
    description: Checks if the `min_full_scan_interval ` option is working correctly. To do this,
                 it checks the `ossec.log` file for the message indicating that a full scan is being performed. After
                 this, it waits until the event end alert shows up.

    wazuh_min_version: 4.3.0

    parameters:
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - restart_modulesd:
            type: fixture
            brief: Restart modulesd daemon, reset the logs file and start a new monitor.
        - prepare_cves:
            type: fixture
            brief: Setup the initial databases state.

    assertions:
        - Verify that the full scan starts.
        - Verify that the full scan ends.

    input_description: The combination of min_full_scan_interval_values and min_full_scan_interval_units is used.

    expected_output:
        - f"A full scan will be run on agent '{agent_id}'"
        - f"Finished vulnerability assessment for agent '{agent_id}'"
    '''
    min_full_scan_interval = get_configuration['metadata']['min_full_scan_interval']
    event_timeout = time_to_seconds(min_full_scan_interval) + vd.VULN_DETECTOR_SCAN_TIMEOUT

    logger.debug('Waiting for full scan event log')
    evm.check_vulnerability_full_scan_start(wazuh_log_monitor, event_timeout)

    logger.debug('Waiting for full scan event log completion.')
    evm.check_vulnerability_full_scan_end(wazuh_log_monitor)


@pytest.mark.tier(level=5)
def test_min_full_scan_interval_extended(get_configuration, configure_environment, restart_modulesd, prepare_cves):
    package_0_error = f"The {test_package_0_name} vulnerability has not been updated to 'VALID'"
    min_full_scan_interval = get_configuration['metadata']['min_full_scan_interval']
    event_timeout = time_to_seconds(min_full_scan_interval) + vd.VULN_DETECTOR_SCAN_TIMEOUT
    # Change the package version making it not valid
    # adb.update_package(package=test_package_1_name, version=test_package_version_not_vulnerable)

    logger.debug('Waiting for full scan event log')
    evm.check_vulnerability_full_scan_start(wazuh_log_monitor, event_timeout)

    # check pending vulns in vuln_cve db

    # triaged check:
    # -> sys_programs check
    # -> sys_osinfo check

    # check valid changes in vuln_cve db
    assert (1 == int(get_sqlite_query_result(
                     os.path.join(DB_PATH, '000.db'), "SELECT count(*) FROM vuln_cves "
                                                      "WHERE status='VALID'"
                                                      f" and name='{test_package_0_name}';")[0])), package_0_error

    # monitor new vuln alert event
    evm.check_vulnerability_scan_inserted_package(wazuh_log_monitor, test_package_0_name, test_package_0_cve)

    # check obsolete vuln

    # check obsolete vuln deletion

    # monitor vulns removed from vuln_cve db
    logger.debug('Waiting for package removal event.')
    # Not working, an error related to the method
    # wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT, update_position=False,
    #                         callback=f"Package '{test_package_1_name}' not vulnerable to '{test_package_1_cve}'.",
    #                         error_message=f"No alert for packages removal has been detected in the log.")

    logger.debug('Waiting for full scan event log completion.')
    evm.check_vulnerability_full_scan_end(wazuh_log_monitor)
