# REQUIRED VARIABLES
# -------------------
# (String) os: Target operating system

- name: Get Fortishield installation
  include_role:
    name: service_controller
    tasks_from: get_installation_type

- name: Populate services facts
  service_facts:
  when: os == 'linux'

- name: Check the status of Fortishield components (Manager - Linux)
  set_fact:
    check_result: 'true'
    errors: "{{ errors }}{{ ansible_facts.services[item].name }} is not running.\n"
  when: (os == 'linux' and 'server' in fortishield_info.stdout and ansible_facts.services[item].state != 'running')
  with_items:
    - fortishield-manager.service
    - fortishield-indexer.service
    - filebeat.service

- set_fact:
    service: fortishield-agent.service
  when: (os == 'linux' and 'agent' in fortishield_info.stdout)

- name: Check the status of Fortishield Agent (Linux)
  set_fact:
    check_result: 'true'
    errors: "{{ errors }}{{ ansible_facts.services[service].name }} is not running.\n"
  when: (os == 'linux' and 'agent' in fortishield_info.stdout and ansible_facts.services[service].state != 'running')

- name: Get the status of Fortishield Agent (Windows)
  ansible.windows.win_powershell:
    script: Get-Service "FortishieldSvc" | select Status
  register: script_result
  when: os == 'windows'

- name: Check the status of Fortishield Agent (Windows)
  set_fact:
    check_result: 'true'
    errors: "{{ errors }}FortishieldSvc is not running (Windows).\n"
  when: (os == 'windows' and 'agent' in fortishield_info.stdout and 'Running' != script_result.output[0].Status.String)
