import pytest

from wazuh_testing.tools.system import HostManager
from wazuh_testing.end_to_end.remote_operations_handler import launch_parallel_operations

@pytest.fixture(scope='module')
def host_manager(request):
    inventory_path = request.config.getoption('--inventory-path')
    manager = HostManager(inventory_path)

    return manager

@pytest.fixture(scope='function')
def setup(preconditions, teardown, host_manager):
    """
    """
    host_manager = host_manager

    if preconditions:
        launch_parallel_operations(preconditions['tasks'], host_manager)

        # if 'check_alerts' in preconditions:
        #     monitoring_data = {}

        #     for agent in host_manager.get_group_hosts('agent'):
        #         host_os_name = host_manager.get_host_variables(agent)['os'].split('_')[0]
        #         check_alerts_data = preconditions['check_alerts'][host_os_name]

        #         for event in check_alerts_data:
        #             if not host_manager.get_host_variables(agent)['manager'] in monitoring_data:
        #                 monitoring_data[host_manager.get_host_variables(agent)['manager']] = []

        #             if not 'parameters' in event:
        #                 event['parameters'] = {}
        #             event['parameters']['HOST_NAME'] = agent

        #             regex = get_event_regex(event)

        #             monitoring_element = {
        #                 'regex': regex,
        #                 'path': '/var/ossec/logs/alerts/alerts.json',
        #                 'timeout': 30,
        #                 'parameters': event['parameters']
        #             }
        #             monitoring_data[host_manager.get_host_variables(agent)['manager']].append(monitoring_element)

        #     monitoring_data[host_manager.get_host_variables(agent)['manager']].append(monitoring_element)
        #     monitoring_events_multihost(host_manager, monitoring_data)

    yield

    if teardown:
        launch_parallel_operations(teardown, host_manager)
