# Copyright (C) 2015, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is a free software; you can redistribute it and/or modify it under the terms of GPLv2

"""
Vulnerability Detector Basic Cases Tests
----------------------------------------

Type: End-to-End (E2E)

Brief:
    This module contains basic tests to ensure the proper functionality of the Vulnerability Detector.
    The tests validate that initial Syscollector scans, along with installation, removal, and uninstall operations,
    trigger Vulnerability Detector scans, generating the expected vulnerabilities.
    The verification of vulnerabilities is conducted through the Wazuh Indexer, Agents' state index, and Wazuh API vulnerability endpoints.
    Additionally, the tests ensure the consistency of these values.

Tests:
    - test_syscollector_initial_agent_scan:
        Validates the initiation of Syscollector scans across all agents in the environment.
        Subsequently, it ensures that the Vulnerability Detector accurately detects vulnerabilities within the environment.
        The Agent's Vulnerability Indexer index is expected to be updated with the detected vulnerabilities.

Issue: https://github.com/wazuh/wazuh-qa/issues/4369

Components:
  - vulnerability_detector
  - syscollector

Environment: e2e_vulnerability_detector

Tiers: 0

Markers:
  - e2e
  - vulnerability_detector
  - tier0

ToDo:
    - check_vuln_state_index: Function to ensure the consitency of the agent's vulnerabilities
    - Check if wait_until_vuln_scan_agents_finished function works as expected for the second scan
"""
import os
import pytest
import logging
import yaml

from typing import Generator, Dict, List

from wazuh_testing.tools.configuration import load_configuration_template
from wazuh_testing.end_to_end.configuration import backup_configurations, restore_backup, configure_environment
from wazuh_testing.end_to_end.logs import truncate_agents_logs, truncate_managers_logs, truncate_logs
from wazuh_testing.end_to_end.wazuh_api import  get_agents_vulnerabilities
from wazuh_testing.end_to_end.waiters import wait_until_vd_is_updated, wait_until_vuln_scan_agents_finished
from wazuh_testing.end_to_end.monitoring import generate_monitoring_logs_all_agent, monitoring_events_multihost
from wazuh_testing.end_to_end.regex import get_event_regex
from wazuh_testing.end_to_end.indexer_api import get_indexer_values
from wazuh_testing.tools.system import HostManager
from wazuh_testing.end_to_end.remote_operations_handler import launch_parallel_operations


TIMEOUT_SYSCOLLECTOR_SCAN = 200
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

local_path = os.path.dirname(os.path.abspath(__file__))
current_dir = os.path.dirname(__file__)
configurations_dir = os.path.join(current_dir, "configurations")
configurations_paths = {
        'manager': os.path.join(configurations_dir, 'manager.yaml'),
        'agent': os.path.join(configurations_dir, 'agent.yaml')
        }


def load_vulnerability_detector_configurations():
    """Return the configurations for Vulnerability testing for the agent and manager roles

    Return:
        Dict: Configurations for each role
    """
    return {
        'agent': load_configuration_template(configurations_paths['agent'], [{}], [{}]),
        'manager': load_configuration_template(configurations_paths['manager'], [{}], [{}])
    }


@pytest.fixture(scope='module')
def setup_vulnerability_tests(host_manager: HostManager) -> Generator:
    """Setup the vulnerability tests environment

    Args:
        host_manager (HostManager): An instance of the HostManager class.
    """
    logger.error("Init setup of environment")

    # Configure managers and agents
    logger.error("Getting backup of current configurations")
    hosts_configuration_backup = backup_configurations(host_manager)
    logger.error("Configuring environment")
    configure_environment(host_manager, load_vulnerability_detector_configurations())

    # Restart managers and stop agents
    logger.error("Stopping agents")
    host_manager.control_environment('stop', ['agent'])
    logger.error("Restarting managers")
    host_manager.control_environment('restart', ['manager'])

    # Wait until VD is updated
    logger.error("Wait until Vulnerability Detector has update all the feeds")
    wait_until_vd_is_updated(host_manager)

    # Truncate alerts and logs of managers and agents
    logger.error("Truncate managers and agents logs")
    truncate_logs(host_manager)

    # Start agents
    logger.error("Starting agents")
    host_manager.control_environment('start', ['agent'])

    yield

    logger.error("Restoring original configuration")
    restore_backup(host_manager, hosts_configuration_backup)


def check_vuln_state_index(host_manager: HostManager, agents_vulnerabilities_api_value: Dict[str, List[Dict]]):
    """Check the consistency of the vulnerabilities included in the indexer.

    This function ensures that the vulnerabilities gathered from the Wazuh API are included in the
    Agent's Vulnerabilities index.

    Args:
        host_manager (HostManager): Host manager of the environment.
        agents_vulnerabilities_api_value (Dict[str, List[str]]): A dictionary containing the list of vulnerabilities
            for each agent, where keys are agent names and values are lists of strings representing the vulnerabilities.

    Raises:
        AssertionError: If inconsistencies are found between the API values and the state of the indexer.
    """
    # Get the indexer values
    state_index_content_before_second_scan = get_indexer_values(host_manager)

    # To Do: Ensure consistency of the agent_vulnerabilities_api_value and state_index_content_before_second_scan
    pass


@pytest.mark.dependency()
@pytest.mark.filterwarnings('ignore::urllib3.exceptions.InsecureRequestWarning')
def test_syscollector_initial_scans(host_manager, setup_vulnerability_tests):
    """
    description: Validates the initiation of Syscollector scans across all agents in the environment.

    This test ensures that the Vulnerability Detector accurately detects vulnerabilities within the environment.
    The Agent's Vulnerability Indexer index is expected to be updated with the detected vulnerabilities.

    tier: 0

    parameters:
        - host_manager:
            type: fixture
            brief: Get the host manager of the environment
        - setup_vulnerability_tests:
            type: fixture
            brief: Setup the environment to proceed with the testing

    assertions:
        - Verify that syscollector scan is started after agent start
        - Verify that Vulnerability scan is performed for all the agent
        - Verify that vulnerabilities are generated for each agent (Check vulnerabilities using Wazuh API)
        - Verify that Agent's Vulnerabilities index is updated with the agent vulnerabilities, being conssitent with the API results
        - Verify that second scan is performed in expected timeframe
        - Verify that no new vulnearbilities are detected since the first scan

    cases: None

    tags:
        - syscollector
        - vulnerability_detector
    """
    # Monitor for the first Syscollector scan in all the agents
    logger.critical("Monitoring Syscollector First Scan")
    monitoring_data = generate_monitoring_logs_all_agent(host_manager,
                                                         [get_event_regex({'event': 'syscollector_scan_start'}),
                                                          get_event_regex({'event': 'syscollector_scan_end'})],
                                                          [TIMEOUT_SYSCOLLECTOR_SCAN, TIMEOUT_SYSCOLLECTOR_SCAN])

    monitoring_events_multihost(host_manager, monitoring_data)

    # Truncate agents logs to detect second scan
    logger.critical("Truncating agent's logs")
    truncate_agents_logs(host_manager)

    # Wait until all agents has been scanned
    logger.critical("Waiting until agent's VD scan is over")
    wait_until_vuln_scan_agents_finished(host_manager)

    # Check vulnerabilities for agent
    logger.critical("Check agent's vulnerabilities")
    agents_vuln_before_second_scan = get_agents_vulnerabilities(host_manager)
    for agent, vuln in agents_vuln_before_second_scan.items():
        assert vuln, f"No vulnerabilities were detected for agent {agent}"

    # Compare agents_vuln_before_second_scan with state_index_content
    logger.critical("Comparing state and API vulnerabilities for each agent")
    check_vuln_state_index(host_manager, agents_vuln_before_second_scan)

    # Truncate manager_logs to prevent trigger wait_until_vuln_scan_agents_finished wrongly
    logger.critical("Truncating manager logs")
    truncate_managers_logs(host_manager)

    logger.critical("Monitoring Second Syscollector scan")
    # The Agent's syscollector second scan is run
    monitoring_data = generate_monitoring_logs_all_agent(host_manager,
                                                         [get_event_regex({'event': 'syscollector_scan_start'}),
                                                          get_event_regex({'event': 'syscollector_scan_end'})],
                                                          [TIMEOUT_SYSCOLLECTOR_SCAN, TIMEOUT_SYSCOLLECTOR_SCAN])

    monitoring_events_multihost(host_manager, monitoring_data)

    # WARNING
    # Is possible that second scan will not produce expected Finished Scan in the agent.
    # In that case search for another event or include a hardcoded timeout
    logger.critical("Waiting until agent's VD scan is over")
    wait_until_vuln_scan_agents_finished(host_manager)

    logger.critical("Getting agents's vulnerabilities")
    agents_vuln_after_second_scan = get_agents_vulnerabilities(host_manager)

    assert agents_vuln_before_second_scan == agents_vuln_after_second_scan

    # Compare agents_vuln_after_second_scan with state_index_content
    logger.critical("Comparing state and API vulnerabilities for each agent")
    check_vuln_state_index(host_manager, agents_vuln_after_second_scan)


# -------------------------

cases = {}

with open(os.path.join(current_dir, os.path.join('cases', 'test_vulnerability.yaml')), 'r') as cases_file:
    cases = yaml.load(cases_file, Loader=yaml.FullLoader)



complete_list = [
    (
        case['preconditions'] if 'preconditions' in case else None,
        case['body'] if 'body' in case else None,
        case['teardown'] if 'teardown' in case else None
    )
    for case in cases
]

dependencies = [None if 'depends' not in case else pytest.mark.depends(name=case['depend']) for case in cases]
list_ids = [ case['id'] for case in cases]


# @pytest.mark.dependency(depends=["test_syscollector_second_scan"])
@pytest.mark.parametrize('preconditions, body, teardown', complete_list, ids=list_ids)
def test_vulnerability_detector_scans(preconditions, body, teardown, setup, host_manager):

    # Launch tests tasks
    launch_parallel_operations(body['tasks'], host_manager)

    # # Check vulnerability
    # agents_vuln_after_second_scan = get_agents_vulnerabilities(host_manager)

    # Check alert in Wazuh Indexer
    # monitoring_data = generate_monitoring_alerts_all_agent(host_manager, body['check_alerts'])
    # expected_alerts = body['check_agent_alert_indexer']

    # Check agent System state
    # To Do
    # results = monitoring_events(host_manager, monitoring_data)
    # assert all(results.values()), f"Expected message was not triggered for some agents, {results}"
